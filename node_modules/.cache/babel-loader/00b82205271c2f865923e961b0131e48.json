{"ast":null,"code":"import sula from './core';\nimport warning from './_util/warning';\nexport var registerPlugin = function registerPlugin(pluginType, pluginName, pluginImpl) {\n  if (pluginType === 'convertParams') {\n    sula.convertParamsType(pluginName, pluginImpl);\n    return;\n  } else if (pluginType === 'converter') {\n    sula.converterType(pluginName, pluginImpl);\n    return;\n  } else if (pluginType === 'dependency') {\n    sula.dependencyType(pluginName, pluginImpl);\n    return;\n  } else if (pluginType === 'validator') {\n    sula.validatorType(pluginName, pluginImpl);\n    return;\n  }\n\n  warning(false, 'registerPlugin', \"unknown pluginType \".concat(pluginType));\n};","map":{"version":3,"sources":["/Users/x/workspace/xz8la8/open-sula/sula-samples-cra/node_modules/_sula@1.0.0-beta.16@sula/es/plugin.js"],"names":["sula","warning","registerPlugin","pluginType","pluginName","pluginImpl","convertParamsType","converterType","dependencyType","validatorType","concat"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,QAAjB;AACA,OAAOC,OAAP,MAAoB,iBAApB;AACA,OAAO,IAAIC,cAAc,GAAG,SAASA,cAAT,CAAwBC,UAAxB,EAAoCC,UAApC,EAAgDC,UAAhD,EAA4D;AACtF,MAAIF,UAAU,KAAK,eAAnB,EAAoC;AAClCH,IAAAA,IAAI,CAACM,iBAAL,CAAuBF,UAAvB,EAAmCC,UAAnC;AACA;AACD,GAHD,MAGO,IAAIF,UAAU,KAAK,WAAnB,EAAgC;AACrCH,IAAAA,IAAI,CAACO,aAAL,CAAmBH,UAAnB,EAA+BC,UAA/B;AACA;AACD,GAHM,MAGA,IAAIF,UAAU,KAAK,YAAnB,EAAiC;AACtCH,IAAAA,IAAI,CAACQ,cAAL,CAAoBJ,UAApB,EAAgCC,UAAhC;AACA;AACD,GAHM,MAGA,IAAIF,UAAU,KAAK,WAAnB,EAAgC;AACrCH,IAAAA,IAAI,CAACS,aAAL,CAAmBL,UAAnB,EAA+BC,UAA/B;AACA;AACD;;AAEDJ,EAAAA,OAAO,CAAC,KAAD,EAAQ,gBAAR,EAA0B,sBAAsBS,MAAtB,CAA6BP,UAA7B,CAA1B,CAAP;AACD,CAhBM","sourcesContent":["import sula from './core';\nimport warning from './_util/warning';\nexport var registerPlugin = function registerPlugin(pluginType, pluginName, pluginImpl) {\n  if (pluginType === 'convertParams') {\n    sula.convertParamsType(pluginName, pluginImpl);\n    return;\n  } else if (pluginType === 'converter') {\n    sula.converterType(pluginName, pluginImpl);\n    return;\n  } else if (pluginType === 'dependency') {\n    sula.dependencyType(pluginName, pluginImpl);\n    return;\n  } else if (pluginType === 'validator') {\n    sula.validatorType(pluginName, pluginImpl);\n    return;\n  }\n\n  warning(false, 'registerPlugin', \"unknown pluginType \".concat(pluginType));\n};"]},"metadata":{},"sourceType":"module"}