{"ast":null,"code":"'use strict';\n\nvar value = require('es5-ext/object/valid-value'),\n    normalize = require('es5-ext/object/normalize-options'),\n    isVarNameValid = require('esniff/is-var-name-valid'),\n    map = Array.prototype.map,\n    keys = Object.keys,\n    stringify = JSON.stringify;\n\nmodule.exports = function (data, context\n/*, options*/\n) {\n  var names,\n      argNames,\n      argValues,\n      options = Object(arguments[2]);\n  value(data) && value(data.literals) && value(data.substitutions);\n  context = normalize(context);\n  names = keys(context).filter(isVarNameValid);\n  argNames = names.join(', ');\n  argValues = names.map(function (name) {\n    return context[name];\n  });\n  return [data.literals].concat(map.call(data.substitutions, function (expr) {\n    var resolver;\n    if (!expr) return undefined;\n\n    try {\n      resolver = new Function(argNames, 'return (' + expr + ')');\n    } catch (e) {\n      throw new TypeError(\"Unable to compile expression:\\n\\targs: \" + stringify(argNames) + \"\\n\\tbody: \" + stringify(expr) + \"\\n\\terror: \" + e.stack);\n    }\n\n    try {\n      return resolver.apply(null, argValues);\n    } catch (e) {\n      if (options.partial) return '#{' + expr + '}';\n      throw new TypeError(\"Unable to resolve expression:\\n\\targs: \" + stringify(argNames) + \"\\n\\tbody: \" + stringify(expr) + \"\\n\\terror: \" + e.stack);\n    }\n  }));\n};","map":{"version":3,"sources":["/Users/x/workspace/xz8la8/open-sula/sula-samples-cra/node_modules/_tplstr@1.0.2@tplstr/resolve.js"],"names":["value","require","normalize","isVarNameValid","map","Array","prototype","keys","Object","stringify","JSON","module","exports","data","context","names","argNames","argValues","options","arguments","literals","substitutions","filter","join","name","concat","call","expr","resolver","undefined","Function","e","TypeError","stack","apply","partial"],"mappings":"AAAA;;AAEA,IAAIA,KAAK,GAAYC,OAAO,CAAC,4BAAD,CAA5B;AAAA,IACIC,SAAS,GAAQD,OAAO,CAAC,kCAAD,CAD5B;AAAA,IAEIE,cAAc,GAAGF,OAAO,CAAC,0BAAD,CAF5B;AAAA,IAIIG,GAAG,GAAGC,KAAK,CAACC,SAAN,CAAgBF,GAJ1B;AAAA,IAI+BG,IAAI,GAAGC,MAAM,CAACD,IAJ7C;AAAA,IAKIE,SAAS,GAAGC,IAAI,CAACD,SALrB;;AAOAE,MAAM,CAACC,OAAP,GAAiB,UAAUC,IAAV,EAAgBC;AAAO;AAAvB,EAAsC;AACtD,MAAIC,KAAJ;AAAA,MAAWC,QAAX;AAAA,MAAqBC,SAArB;AAAA,MAAgCC,OAAO,GAAGV,MAAM,CAACW,SAAS,CAAC,CAAD,CAAV,CAAhD;AAECnB,EAAAA,KAAK,CAACa,IAAD,CAAL,IAAeb,KAAK,CAACa,IAAI,CAACO,QAAN,CAApB,IAAuCpB,KAAK,CAACa,IAAI,CAACQ,aAAN,CAA7C;AACAP,EAAAA,OAAO,GAAGZ,SAAS,CAACY,OAAD,CAAnB;AACAC,EAAAA,KAAK,GAAGR,IAAI,CAACO,OAAD,CAAJ,CAAcQ,MAAd,CAAqBnB,cAArB,CAAR;AACAa,EAAAA,QAAQ,GAAGD,KAAK,CAACQ,IAAN,CAAW,IAAX,CAAX;AACAN,EAAAA,SAAS,GAAGF,KAAK,CAACX,GAAN,CAAU,UAAUoB,IAAV,EAAgB;AAAE,WAAOV,OAAO,CAACU,IAAD,CAAd;AAAuB,GAAnD,CAAZ;AACA,SAAO,CAACX,IAAI,CAACO,QAAN,EAAgBK,MAAhB,CAAuBrB,GAAG,CAACsB,IAAJ,CAASb,IAAI,CAACQ,aAAd,EAA6B,UAAUM,IAAV,EAAgB;AAC1E,QAAIC,QAAJ;AACA,QAAI,CAACD,IAAL,EAAW,OAAOE,SAAP;;AACX,QAAI;AACHD,MAAAA,QAAQ,GAAG,IAAIE,QAAJ,CAAad,QAAb,EAAuB,aAAaW,IAAb,GAAoB,GAA3C,CAAX;AACA,KAFD,CAEE,OAAOI,CAAP,EAAU;AACX,YAAM,IAAIC,SAAJ,CAAc,4CAA4CvB,SAAS,CAACO,QAAD,CAArD,GACnB,YADmB,GACJP,SAAS,CAACkB,IAAD,CADL,GACc,aADd,GAC8BI,CAAC,CAACE,KAD9C,CAAN;AAEA;;AACD,QAAI;AACH,aAAOL,QAAQ,CAACM,KAAT,CAAe,IAAf,EAAqBjB,SAArB,CAAP;AACA,KAFD,CAEE,OAAOc,CAAP,EAAU;AACX,UAAIb,OAAO,CAACiB,OAAZ,EAAqB,OAAO,OAAOR,IAAP,GAAc,GAArB;AACrB,YAAM,IAAIK,SAAJ,CAAc,4CAA4CvB,SAAS,CAACO,QAAD,CAArD,GACnB,YADmB,GACJP,SAAS,CAACkB,IAAD,CADL,GACc,aADd,GAC8BI,CAAC,CAACE,KAD9C,CAAN;AAEA;AACD,GAhB6B,CAAvB,CAAP;AAiBA,CAzBD","sourcesContent":["'use strict';\n\nvar value          = require('es5-ext/object/valid-value')\n  , normalize      = require('es5-ext/object/normalize-options')\n  , isVarNameValid = require('esniff/is-var-name-valid')\n\n  , map = Array.prototype.map, keys = Object.keys\n  , stringify = JSON.stringify;\n\nmodule.exports = function (data, context/*, options*/) {\n\tvar names, argNames, argValues, options = Object(arguments[2]);\n\n\t(value(data) && value(data.literals) && value(data.substitutions));\n\tcontext = normalize(context);\n\tnames = keys(context).filter(isVarNameValid);\n\targNames = names.join(', ');\n\targValues = names.map(function (name) { return context[name]; });\n\treturn [data.literals].concat(map.call(data.substitutions, function (expr) {\n\t\tvar resolver;\n\t\tif (!expr) return undefined;\n\t\ttry {\n\t\t\tresolver = new Function(argNames, 'return (' + expr + ')');\n\t\t} catch (e) {\n\t\t\tthrow new TypeError(\"Unable to compile expression:\\n\\targs: \" + stringify(argNames) +\n\t\t\t\t\"\\n\\tbody: \" + stringify(expr) + \"\\n\\terror: \" + e.stack);\n\t\t}\n\t\ttry {\n\t\t\treturn resolver.apply(null, argValues);\n\t\t} catch (e) {\n\t\t\tif (options.partial) return '#{' + expr + '}';\n\t\t\tthrow new TypeError(\"Unable to resolve expression:\\n\\targs: \" + stringify(argNames) +\n\t\t\t\t\"\\n\\tbody: \" + stringify(expr) + \"\\n\\terror: \" + e.stack);\n\t\t}\n\t}));\n};\n"]},"metadata":{},"sourceType":"script"}