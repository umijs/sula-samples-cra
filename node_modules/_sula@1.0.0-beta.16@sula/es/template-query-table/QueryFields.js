function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

import React from 'react';
import DownOutlined from '@ant-design/icons/DownOutlined';
import cx from 'classnames';
import { getItemSpan } from '../form/utils/layoutUtil';
import FieldGroupContext from '../form/FieldGroupContext';
import { FieldGroup, Field, FormAction } from '../form';
import './style/query-fields.less';
import LocaleReceiver from '../localereceiver';

var QueryFields = /*#__PURE__*/function (_React$Component) {
  _inherits(QueryFields, _React$Component);

  var _super = _createSuper(QueryFields);

  function QueryFields() {
    var _this;

    _classCallCheck(this, QueryFields);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    _this.state = {
      collapsed: true
    };

    _this.renderFields = function () {
      var _this$props = _this.props,
          fields = _this$props.fields,
          visibleFieldsCount = _this$props.visibleFieldsCount,
          itemLayout = _this$props.itemLayout;
      var matchedPoint = _this.context.matchedPoint;
      var fieldsNameList = [];
      var allSpan = 0;
      var visibleAllSpan = 0;
      var finalFields = fields.map(function (field, index) {
        fieldsNameList.push(field.name);
        var isVisible = index < visibleFieldsCount;
        var itemSpan = getItemSpan(itemLayout, matchedPoint, field.itemLayout);
        allSpan += itemSpan;

        if (isVisible) {
          visibleAllSpan += itemSpan;
        }

        return /*#__PURE__*/React.createElement(Field, _extends({}, field, {
          initialVisible: isVisible,
          key: field.name
        }));
      });
      _this.expandSpan = 24 - allSpan % 24;
      _this.collapseSpan = 24 - visibleAllSpan % 24;
      return finalFields;
    };

    _this.renderFormAction = function (locale) {
      var layout = _this.props.layout;
      var collapsed = _this.state.collapsed;
      var actionsRender = [{
        type: 'button',
        props: {
          type: 'primary',
          children: locale.queryText
        },
        action: [{
          type: 'validateQueryFields',
          resultPropName: '$queryFieldsValue'
        }, {
          type: 'refreshTable',
          args: [{
            current: 1
          }, '#{result}']
        }]
      }, {
        type: 'button',
        props: {
          children: locale.resetText
        },
        action: ['resetFields', {
          type: 'resetTable',
          args: [false]
        }, {
          type: 'refreshTable',
          args: [{
            current: 1
          }, '#{form.getFieldsValue(true)}']
        }]
      }].concat(_toConsumableArray(_this.hasMoreQueryFields() ? [{
        type: function type() {
          return /*#__PURE__*/React.createElement("a", null, /*#__PURE__*/React.createElement("span", null, collapsed ? locale.expandText : locale.collapseText), /*#__PURE__*/React.createElement(DownOutlined, {
            style: {
              transition: '0.3s all',
              transform: "rotate(".concat(collapsed ? 0 : 0.5, "turn)")
            }
          }));
        },
        action: function action() {
          _this.setState({
            collapsed: !collapsed
          }, function () {
            _this.updateVisibleFields();
          });
        }
      }] : []));
      var finalSpan = _this.state.collapsed ? _this.collapseSpan : _this.expandSpan;
      var layoutProps = {};

      if (finalSpan === 24) {
        layoutProps.actionsPosition = 'right';
        layoutProps.style = {
          marginBottom: 24
        };
      } else {
        layoutProps.style = _objectSpread({
          display: 'flex',
          justifyContent: 'flex-end'
        }, layout === 'vertical' ? {
          marginTop: 30
        } : {});
      }

      return /*#__PURE__*/React.createElement(FormAction, _extends({
        itemLayout: {
          span: finalSpan
        }
      }, layoutProps, {
        actionsRender: actionsRender
      }));
    };

    return _this;
  }

  _createClass(QueryFields, [{
    key: "hasMoreQueryFields",
    value: function hasMoreQueryFields() {
      return this.props.visibleFieldsCount < this.props.fields.length;
    }
  }, {
    key: "updateVisibleFields",
    value: function updateVisibleFields() {
      var _this2 = this;

      var _this$props2 = this.props,
          getFormInstance = _this$props2.getFormInstance,
          fields = _this$props2.fields,
          visibleFieldsCount = _this$props2.visibleFieldsCount;
      var formInstance = getFormInstance();
      fields.forEach(function (field, index) {
        if (index >= visibleFieldsCount) {
          formInstance.setFieldVisible(field.name, !_this2.state.collapsed);
        }
      });
    }
  }, {
    key: "render",
    value: function render() {
      var _this3 = this;

      var hasActionsRender = this.props.hasActionsRender;
      return /*#__PURE__*/React.createElement(LocaleReceiver, null, function (locale) {
        return /*#__PURE__*/React.createElement(FieldGroup, {
          container: {
            type: 'div',
            props: {
              className: cx("sula-template-query-table-fields-wrapper", _defineProperty({}, "sula-template-query-table-fields-divider", hasActionsRender))
            }
          }
        }, _this3.renderFields(), _this3.renderFormAction(locale));
      });
    }
  }]);

  return QueryFields;
}(React.Component);

QueryFields.contextType = FieldGroupContext;
export { QueryFields as default };