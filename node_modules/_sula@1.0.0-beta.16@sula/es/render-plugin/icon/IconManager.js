function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

import React from 'react';
import isFunction from 'lodash/isFunction';
import isString from 'lodash/isString';
import assign from 'lodash/assign';
import Icon from './Icon';
import { toArrayActions, triggerRenderPlugin } from '../../rope/triggerPlugin';
import PubSub from '../../_util/pubsub';
import { STOP } from '../../rope';
import InnerLoadingIcon from './InnerLoadingIcon';

var RefLoadingIcon = function RefLoadingIcon(props, ref) {
  var _React$useState = React.useState(false),
      _React$useState2 = _slicedToArray(_React$useState, 2),
      loading = _React$useState2[0],
      setLoading = _React$useState2[1];

  React.useImperativeHandle(ref, function () {
    return {
      showLoading: function showLoading() {
        return setLoading(true);
      },
      hideLoading: function hideLoading() {
        return setLoading(false);
      },
      isLoading: function isLoading() {
        return loading;
      }
    };
  }); // span 接受鼠标事件
  // tooltip 的问题暂时这样处理

  return /*#__PURE__*/React.createElement("span", null, /*#__PURE__*/React.createElement(InnerLoadingIcon, _extends({}, props, {
    style: assign({}, props.style, {
      display: loading ? '' : 'none'
    })
  })), /*#__PURE__*/React.createElement(Icon, _extends({}, props, {
    style: assign({}, props.style, {
      display: loading ? 'none' : ''
    })
  })));
};

var LoadingIcon = React.forwardRef(RefLoadingIcon);

var LoadingIconManager = function LoadingIconManager(props) {
  var iconRef = React.useRef(null);

  var ctx = props.ctx,
      config = props.config,
      _props$autoLoading = props.autoLoading,
      autoLoading = _props$autoLoading === void 0 ? true : _props$autoLoading,
      restProps = _objectWithoutProperties(props, ["ctx", "config", "autoLoading"]);

  if (!config || !config.action) {
    return /*#__PURE__*/React.createElement(Icon, restProps);
  }

  var showLoadingAction = function showLoadingAction() {
    return iconRef.current.showLoading();
  };

  var hideLoadingAction = function hideLoadingAction() {
    // 例如和modal搭配，modal销毁时，iconRef.current会变为null
    if (iconRef.current) {
      iconRef.current.hideLoading();
    }
  };

  React.useEffect(function () {
    // 行为链中断
    var unsub = PubSub.sub(STOP, function () {
      hideLoadingAction();
    });
    return function () {
      unsub();
    };
  }, []);
  var finalCtx = ctx;
  var finalActions;

  if (autoLoading) {
    finalActions = [];
    toArrayActions(config.action, finalActions);
    var lastAction = finalActions[finalActions.length - 1];

    if (isFunction(lastAction) || isString(lastAction)) {
      var originalLastAction = lastAction;
      lastAction = {
        type: originalLastAction,
        final: hideLoadingAction
      };
    } else if (lastAction.final) {
      var originalFinal = lastAction.final;
      lastAction = assign({}, lastAction, {
        final: function final() {
          hideLoadingAction();
          originalFinal.apply(void 0, arguments);
        }
      });
    } else {
      lastAction = assign({}, lastAction, {
        final: hideLoadingAction
      });
    }

    finalActions.unshift(showLoadingAction);
    finalActions[finalActions.length - 1] = lastAction;
  } else {
    finalActions = config.action;
    finalCtx = assign({}, ctx, {
      icon: {
        showLoading: showLoadingAction,
        hideLoading: hideLoadingAction
      }
    });
  }

  var elem = triggerRenderPlugin(finalCtx, assign({}, config, {
    type: function type() {
      return /*#__PURE__*/React.createElement(LoadingIcon, _extends({}, restProps, {
        ref: iconRef
      }));
    },
    action: finalActions
  }));
  return elem;
};

export default LoadingIconManager;