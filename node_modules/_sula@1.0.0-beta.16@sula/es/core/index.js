function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

import toLower from 'lodash/toLower';
import warning from '../_util/warning';
export var PluginRegistry = function PluginRegistry() {
  var _this = this;

  _classCallCheck(this, PluginRegistry);

  this.renderType = function () {};

  this.filterType = function () {};

  this.fieldType = function () {};

  this.validatorType = function () {};

  this.actionType = function () {};

  this.converterType = function () {};

  this.convertParamsType = function () {};

  this.dependencyType = function () {};

  this.registerType = function (name) {
    // @ts-ignore
    var types = _this["__".concat(name, "Types")] = Object.create(null); // 注册插件
    // @ts-ignore

    _this["".concat(name, "Type")] = function (type, callback) {
      // 大小写无关
      var finalType = toLower(type);
      warning(!(finalType in types), 'core', "".concat(name, " type ").concat(type, " already exists."));
      types[finalType] = callback;
    }; // 执行插件
    // @ts-ignore


    _this[name] = function (type, ctx, config) {
      var finalType = toLower(type);
      warning(finalType in types, 'core', "Render type ".concat(type, " no exists."));
      var callback = types[finalType]; // @ts-ignore

      return callback && callback(ctx, config);
    };
  };
};
var sula = new PluginRegistry();
sula.registerType('render');
sula.registerType('field');
sula.registerType('action');
sula.registerType('converter');
sula.registerType('convertParams');
sula.registerType('dependency');
sula.registerType('validator');
sula.registerType('filter');
export default sula;