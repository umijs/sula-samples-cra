function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

import axios from 'axios';
import assign from 'lodash/assign';
import toLower from 'lodash/toLower';
import isArray from 'lodash/isArray';
import isArrayLikeObject from 'lodash/isArrayLikeObject';
import isFunction from 'lodash/isFunction';
import extendConfig from './defaultConfig';
import { toArray } from '../../_util/common';
import { triggerPlugin } from '../../rope/triggerPlugin';
var globalConfig = extendConfig;
var globalConfigMatchers = [];

var getMatchedConfig = function getMatchedConfig(requestConfig) {
  if (!globalConfigMatchers.length) {
    return null;
  }

  for (var i = 0, len = globalConfigMatchers.length; i < len; i += 1) {
    var _globalConfigMatchers = _slicedToArray(globalConfigMatchers[i], 2),
        matcher = _globalConfigMatchers[0],
        _extendConfig = _globalConfigMatchers[1];

    if (matcher(requestConfig)) {
      return _extendConfig;
    }

    return null;
  }
}; // 不再使用fetch这个名字，防止和fetch冲突


export var request = function request(config, ctx) {
  var url = config.url,
      _config$method = config.method,
      method = _config$method === void 0 ? 'GET' : _config$method,
      params = config.params,
      convertParams = config.convertParams,
      converter = config.converter,
      successMessage = config.successMessage,
      restAxiosConfig = _objectWithoutProperties(config, ["url", "method", "params", "convertParams", "converter", "successMessage"]);

  var requestOptions = _objectSpread(_objectSpread({}, restAxiosConfig), {}, {
    url: url,
    method: method
  });

  var matchedConfig = getMatchedConfig(requestOptions);
  var curConf = assign({}, globalConfig, matchedConfig);
  var bizRedirectHandler = curConf.bizRedirectHandler,
      bizDevErrorAdapter = curConf.bizDevErrorAdapter,
      bizErrorMessageAdapter = curConf.bizErrorMessageAdapter,
      bizSuccessMessageAdapter = curConf.bizSuccessMessageAdapter,
      bizNotifyHandler = curConf.bizNotifyHandler,
      bizDataAdapter = curConf.bizDataAdapter,
      bizParamsAdapter = curConf.bizParamsAdapter,
      bizRequestAdapter = curConf.bizRequestAdapter;
  var finalParams = params || {};

  if (convertParams) {
    finalParams = toArray(convertParams).reduce(function (fparams, convertP) {
      fparams = triggerPlugin('convertParams', assign({}, ctx, {
        params: fparams
      }), convertP);
      return fparams;
    }, finalParams);
  }

  if (bizParamsAdapter) {
    finalParams = bizParamsAdapter(finalParams);
  }

  var lMethod = toLower(method);

  if (lMethod === 'get' || lMethod === 'delete') {
    requestOptions.params = finalParams;
  } else {
    requestOptions.data = finalParams;
  }

  if (bizRequestAdapter) {
    requestOptions = bizRequestAdapter(requestOptions);
  }

  return axios(requestOptions).then(function (raw) {
    return raw && raw.data;
  }).then(function (res) {
    return new Promise(function (resolve, reject) {
      // 1. 重定向
      if (bizRedirectHandler) {
        bizRedirectHandler(res);
      } // 2. 开发级别信息转换


      var errorDesc = bizDevErrorAdapter ? bizDevErrorAdapter(res) : null; // 3. 用户级错误信息转换

      var errorMsg = bizErrorMessageAdapter ? bizErrorMessageAdapter(res) : null; // 4. 成功信息转换

      var successMsg = bizSuccessMessageAdapter ? bizSuccessMessageAdapter(res, successMessage) : null; // 5. 消息处理

      if (bizNotifyHandler) {
        bizNotifyHandler({
          errorDesc: errorDesc,
          errorMessage: errorMsg,
          successMessage: successMsg
        });
      } // 生产环境只有 errorMsg 起作用


      if (errorDesc || errorMsg) {
        return reject(errorDesc || errorMsg);
      } // 6. 数据转换


      var data = bizDataAdapter ? bizDataAdapter(res) : res;

      if (converter) {
        data = toArray(converter).reduce(function (fData, converterD) {
          fData = triggerPlugin('converter', assign({}, ctx, {
            data: fData,
            response: res
          }), converterD);
          return fData;
        }, data);
      }

      resolve(data);
    });
  });
};
export var getFormDataParams = function getFormDataParams(formDataParams, params) {
  var formData = new FormData();
  Object.keys(formDataParams).forEach(function (name) {
    var value = formDataParams[name];

    if (isArrayLikeObject(value)) {
      for (var i = 0, len = value.length; i < len; i += 1) {
        var v = value[i];
        formData.append(name, v && v.originFileObj ? v.originFileObj : v);
      }
    } else {
      formData.append(name, value && value.originFileObj ? value.originFileObj : value);
    }
  });

  if (params) {
    return mergeFormDataWithParams(formData, params);
  }

  return formData;
};

function mergeFormDataWithParams(formDataParams, params) {
  Object.keys(params).forEach(function (name) {
    var value = params[name];

    if (isArray(value)) {
      value.forEach(function (v) {
        formDataParams.append(name, v);
      });
    } else {
      formDataParams.append(name, value);
    }
  });
  return formDataParams;
}

request.defaults = axios.defaults;

request.use = function (matcher, extendConfig) {
  if (isFunction(matcher)) {
    globalConfigMatchers.push([matcher, extendConfig]);
  } else {
    globalConfig = assign({}, globalConfig, matcher);
  }
};