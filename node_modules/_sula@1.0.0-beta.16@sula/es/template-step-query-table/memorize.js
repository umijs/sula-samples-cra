function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React from 'react';
import assign from 'lodash/assign';
import omit from 'lodash/omit';

var Item = function Item() {
  return null;
};

var Memorize = function Memorize(props) {
  var children = props.children,
      restProps = _objectWithoutProperties(props, ["children"]);

  var visibleList = React.useRef([]);
  return /*#__PURE__*/React.createElement("div", restProps, React.Children.toArray(children).map(function (child, index) {
    var key = child.props.memoId || index;
    var visible = child.props.visible || visibleList.current.indexOf(key) > -1;
    var visibleStyle = {};

    if (visible && !child.props.visible) {
      // @ts-ignore
      visibleStyle.display = 'none';
    }

    if (visible) {
      var childStyle = assign(child.props.style || {}, visibleStyle);
      var finalChildProps = assign({}, omit(child.props, ['visible', 'memoId']), {
        style: childStyle,
        key: key
      });
      visibleList.current.push(key);
      return /*#__PURE__*/React.createElement("div", finalChildProps);
    } // 未查看过的先不渲染


    return null;
  }));
};

Memorize.Item = Item;
export default Memorize;