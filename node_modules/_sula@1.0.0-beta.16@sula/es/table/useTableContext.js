function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

import React from 'react';
import assign from 'lodash/assign';
import pick from 'lodash/pick';
import omit from 'lodash/omit';
import isUndefined from 'lodash/isUndefined';
import { assignWithDefined } from '../_util/common';
import { triggerActionPlugin } from '../rope/triggerPlugin';
export var HOOK_MARK = 'SULA_TABLE_INTERNAL_HOOKS';

var ContextStore = /*#__PURE__*/function () {
  /**
   * loading  // 额外控制的字段
   */
  function ContextStore(forceRootUpdate) {
    var _this = this;

    _classCallCheck(this, ContextStore);

    this.forceRootUpdate = void 0;
    this.controls = void 0;
    this.tableProps = void 0;
    this.internalControls = {};
    this.records = {};
    this.modalFormRef = void 0;
    this.drawerFormRef = void 0;

    this.getContext = function () {
      return {
        getTable: _this.getTable,
        getInternalHooks: _this.getInternalHooks
      };
    };

    this.getTable = function () {
      return {
        setDataSource: _this.setDataSource,
        getDataSource: _this.getDataSource,
        setPagination: _this.setPagination,
        setFilters: _this.setFilters,
        setSorter: _this.setSorter,
        getSelectedRowKeys: _this.getSelectedRowKeys,
        clearRowSelection: _this.clearRowSelection,
        getSelectedRows: _this.getSelectedRows,
        getPaging: _this.getPaging,
        refreshTable: _this.refreshTable,
        resetTable: _this.resetTable
      };
    };

    this.refreshTable = function (pagination, filters, sorter) {
      var internal = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;

      if (!_this.tableProps.remoteDataSource) {
        return;
      }

      _this.setPagination(pagination);

      _this.setFilters(filters);

      _this.setSorter(sorter);

      _this.showLoading();

      return _this.requestDataSource().then(function (data) {
        var _this$getControls = _this.getControls(),
            pagination = _this$getControls.pagination;

        if (!pagination) {
          _this.setDataSource(data);
        } else {
          var list = data.list,
              pageSize = data.pageSize,
              total = data.total;

          _this.setPagination({
            pageSize: pageSize,
            total: total
          });

          _this.setDataSource(list);
        }
        /**
         * 内部（onChange）触发不清空 selectedRowKeys
         */


        if (!internal && _this.controls.selectedRowKeys && _this.controls.selectedRowKeys.length) {
          if (_this.tableProps.disableClearSelectedRows !== true) {
            _this.clearRowSelection();
          }
        }

        _this.hideLoading();
      }).catch(function () {
        _this.hideLoading();
      });
    };

    this.resetTable = function (isRefresh) {
      if (_this.controls.pagination) {
        _this.setPagination({
          current: 1
        });
      }

      if (_this.controls.filters) {
        var resetFilters = {};
        Object.keys(_this.controls.filters).forEach(function (columnKey) {
          resetFilters[columnKey] = null;
        });

        _this.setFilters(resetFilters);
      }

      if (_this.controls.sorter && _this.controls.sorter.columnKey) {
        _this.setSorter({
          columnKey: _this.controls.sorter.columnKey,
          order: false
        });
      }

      if (isRefresh !== false) {
        return _this.refreshTable();
      }
    };

    this.setDataSource = function (dataSource) {
      _this.controls.dataSource = dataSource;

      _this.forceRootUpdate();
    };

    this.setPagination = function (pagination) {
      if (pagination) {
        _this.controls.pagination = assignWithDefined(_this.controls.pagination, pagination);

        _this.forceRootUpdate();
      }
    };

    this.setFilters = function (filters) {
      if (filters) {
        if (!_this.controls.filters) {
          _this.controls.filters = {};
        }

        Object.keys(filters).forEach(function (columnKey) {
          var filterValue = filters[columnKey];

          if (!isUndefined(filterValue)) {
            // undefined会被忽略
            _this.controls.filters[columnKey] = filterValue;
          } else {
            // undefined 设置为 null
            _this.controls.filters[columnKey] = null;
          }
        });

        _this.forceRootUpdate();
      }
    };

    this.setSorter = function (sorter) {
      if (sorter) {
        _this.controls.sorter = sorter;

        _this.forceRootUpdate();
      }
    };

    this.clearRowSelection = function () {
      _this.setSelectedRowKeys([]);

      _this.records.selectedRows = [];
    };

    this.getPaging = function () {
      return pick(_this.controls, ['pagination', 'filters', 'sorter']);
    };

    this.getDataSource = function () {
      return _this.controls.dataSource;
    };

    this.getSelectedRowKeys = function () {
      return _this.controls.selectedRowKeys;
    };

    this.getSelectedRows = function () {
      return _this.records.selectedRows;
    };

    this.getInternalHooks = function (key) {
      if (key === HOOK_MARK) {
        return {
          setControls: _this.setControls,
          getControls: _this.getControls,
          getCtx: _this.getCtx,
          saveTableProps: _this.saveTableProps,
          getInternalControls: _this.getInternalControls,
          showLoading: _this.showLoading,
          hideLoading: _this.hideLoading,
          onChange: _this.onChange,
          onRowSelectionChange: _this.onRowSelectionChange,
          saveModalFormRef: function saveModalFormRef(modalFormRef) {
            _this.modalFormRef = modalFormRef;
          },
          saveDrawerFormRef: function saveDrawerFormRef(drawerFormRef) {
            _this.drawerFormRef = drawerFormRef;
          }
        };
      }
    };

    this.getCtx = function () {
      var extraCtx = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      var table = _this.getTable();

      var finalCtx = assign(extraCtx, {
        table: table,
        // 内部使用
        __modalGetter: function __modalGetter(type) {
          return type === 'modal' ? _this.modalFormRef.current : _this.drawerFormRef.current;
        }
      });
      var ctxGetter = _this.tableProps.ctxGetter;

      if (ctxGetter) {
        finalCtx.ctxGetter = ctxGetter;
      }

      return finalCtx;
    };

    this.onRowSelectionChange = function (selectedRowKeys, selectedRows) {
      _this.setSelectedRowKeys(selectedRowKeys);

      _this.records.selectedRows = selectedRows;

      if (_this.tableProps.rowSelection && _this.tableProps.rowSelection.onChange) {
        _this.tableProps.rowSelection.onChange(selectedRowKeys, selectedRows);
      }
    };

    this.onChange = function (pagination, filters, sorter, currentData) {
      _this.refreshTable(pagination, filters, sorter, true);

      if (_this.tableProps.onChange) {
        _this.tableProps.onChange(pagination, filters, sorter, currentData);
      }
    };

    this.saveTableProps = function (tableProps) {
      _this.tableProps = tableProps;
    };

    this.showLoading = function () {
      if (!_this.internalControls.loading) {
        _this.internalControls.loading = true;

        _this.forceRootUpdate();
      }
    };

    this.hideLoading = function () {
      if (_this.internalControls.loading) {
        _this.internalControls.loading = false;

        _this.forceRootUpdate();
      }
    };

    this.setControls = function (tableControls) {
      _this.controls = tableControls;
    };

    this.getControls = function () {
      return _this.controls;
    };

    this.getInternalControls = function () {
      return _this.internalControls;
    };

    this.forceRootUpdate = forceRootUpdate;
  }

  _createClass(ContextStore, [{
    key: "setSelectedRowKeys",
    // ==================== Helper ====================
    value: function setSelectedRowKeys(selectedRowKeys) {
      this.controls.selectedRowKeys = selectedRowKeys;
      this.forceRootUpdate();
    }
  }, {
    key: "requestDataSource",
    value: function requestDataSource() {
      var _this$getControls2 = this.getControls(),
          pagination = _this$getControls2.pagination,
          filters = _this$getControls2.filters,
          sorter = _this$getControls2.sorter;

      var finalSorter = omit(sorter, ['column', 'field']);
      var params = pagination ? {
        pageSize: pagination.pageSize,
        current: pagination.current,
        filters: filters,
        sorter: finalSorter
      } : {
        filters: filters,
        sorter: finalSorter
      };
      return triggerActionPlugin(this.getCtx(), assign({}, this.tableProps.remoteDataSource, {
        params: assign({}, this.tableProps.remoteDataSource.params, params)
      }));
    }
  }]);

  return ContextStore;
}();

export default function useTableContext() {
  var tableRef = React.useRef(null);

  var _React$useState = React.useState(),
      _React$useState2 = _slicedToArray(_React$useState, 2),
      forceUpdate = _React$useState2[1];

  if (!tableRef.current) {
    var forceReRender = function forceReRender() {
      forceUpdate({});
    };

    var tableStore = new ContextStore(forceReRender);
    tableRef.current = tableStore.getContext();
  }

  return [tableRef.current];
}