import "antd/es/button/style";
import _Button from "antd/es/button";
import "antd/es/input/style";
import _Input from "antd/es/input";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

import React from 'react';
import isArray from 'lodash/isArray';
import LocaleReceiver from '../../localereceiver';

var SearchFilter = /*#__PURE__*/function () {
  function SearchFilter() {
    var _this = this;

    _classCallCheck(this, SearchFilter);

    this.searchInst = void 0;

    this.onFilterDropdownVisibleChange = function (visible) {
      if (visible) {
        setTimeout(function () {
          return _this.searchInst && _this.searchInst.focus();
        });
      }
    };

    this.filterDropdown = function (_ref) {
      var setSelectedKeys = _ref.setSelectedKeys,
          selectedKeys = _ref.selectedKeys,
          confirm = _ref.confirm,
          clearFilters = _ref.clearFilters;
      // 初始状态是[]
      var finalSelectedKeys = isArray(selectedKeys) ? selectedKeys[0] : selectedKeys;
      return /*#__PURE__*/React.createElement(LocaleReceiver, null, function (locale) {
        return /*#__PURE__*/React.createElement("div", {
          style: {
            padding: '7px 8px'
          }
        }, /*#__PURE__*/React.createElement(_Input, {
          ref: function ref(_ref2) {
            _this.searchInst = _ref2;
          },
          value: finalSelectedKeys,
          onChange: function onChange(e) {
            return setSelectedKeys(e.target.value);
          },
          onPressEnter: function onPressEnter() {
            return confirm();
          }
        }), /*#__PURE__*/React.createElement("div", {
          style: {
            marginTop: 7
          }
        }, /*#__PURE__*/React.createElement(_Button, {
          size: "small",
          disabled: !finalSelectedKeys,
          type: "link",
          style: {
            padding: 0
          },
          onClick: function onClick() {
            return clearFilters();
          }
        }, locale.resetText), /*#__PURE__*/React.createElement(_Button, {
          type: "primary",
          size: "small",
          onClick: function onClick() {
            return confirm();
          },
          style: {
            float: 'right'
          }
        }, locale.okText)));
      });
    };
  }

  _createClass(SearchFilter, [{
    key: "props",
    value: function props() {
      return {
        filterDropdown: this.filterDropdown,
        onFilterDropdownVisibleChange: this.onFilterDropdownVisibleChange
      };
    }
  }]);

  return SearchFilter;
}();

export { SearchFilter as default };