import "antd/es/space/style";
import _Space from "antd/es/space";

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React from 'react';
import assign from 'lodash/assign';
import isFunction from 'lodash/isFunction';
import isString from 'lodash/isString';
import isArray from 'lodash/isArray';
import toLower from 'lodash/toLower';
import transformConfig from '../_util/transformConfig';
import sula from '../core';
import { toArray } from '../_util/common';
import Rope from '.';
import RopeContainer from './RopeContainer';
export var getLazyCtx = function getLazyCtx(ctx) {
  if (!ctx) {
    return null;
  }

  return Object.keys(ctx).reduce(function (memo, key) {
    if (key === 'ctxGetter') {
      var ctxGetter = ctx[key];
      return assign(isFunction(ctxGetter) ? ctxGetter() : Object.keys(ctxGetter).reduce(function (ctxMemo, ctxKey) {
        var curCtxGetter = ctxGetter[ctxKey];
        assign(ctxMemo, isFunction(curCtxGetter) ? curCtxGetter() : {});
        return ctxMemo;
      }, {}), memo);
    }

    memo[key] = ctx[key];
    return memo;
  }, {});
};
/**
 * 1. lazyCtx -> ctx
 * 2. 方法 config.type 执行
 * 3. 配置属性转换
 * 4. 如果是render插件则做funcProps与props的合并
 * 5. 触发插件
 */

export var triggerPlugin = function triggerPlugin(name, ctx, config, skipOptions, isRender) {
  // 1. normalize config
  var normalizedConfig = normalizeConfig(config);

  if (isFunction(normalizedConfig.type)) {
    return normalizedConfig.type(ctx);
  } // 2. render config transform


  var transedConfig = transformConfig(normalizedConfig, ctx, skipOptions);

  if (isRender) {
    var funcProps = transedConfig.funcProps;

    if (funcProps) {
      transedConfig.props = assign({}, transedConfig.props, funcProps);
    }
  } // TODO


  return sula[name](transedConfig.type, ctx, transedConfig);
};
/**
 * 表单插件
 * - skipFuncObjKeys
 *   - props
 * - skipSelector
 */

export var triggerFieldPlugin = function triggerFieldPlugin(lazyCtx, config, valuePropName) {
  var skipSelector = function skipSelector(curKey, parentKey) {
    return parentKey === 'props' && curKey === valuePropName;
  };

  return triggerPlugin('field', getLazyCtx(lazyCtx), config, {
    skipSelector: skipSelector,
    skipFuncObjKeys: ['props']
  }, true);
};
export var triggerRenderPlugin = function triggerRenderPlugin(lazyCtx, config) {
  var ctx = getLazyCtx(lazyCtx); //过滤掉不显示的

  var arrayConf = toArray(config).filter(function (iterConf) {
    var visible = transformConfig(iterConf.visible, ctx);
    return visible != false;
  });

  if (arrayConf.length === 0) {
    return null;
  } else if (arrayConf.length === 1) {
    // 不能传 finalCtx，要传 lazyCtx
    return triggerSingleRenderPlugin(lazyCtx, arrayConf[0]);
  }

  return /*#__PURE__*/React.createElement(_Space, null, arrayConf.map(function (conf, index) {
    var actionNode = triggerSingleRenderPlugin(lazyCtx, conf);
    return React.cloneElement(actionNode, {
      key: index
    });
  }));
};
/**
 * 针对单个，渲染插件可携带action
 * scope: private
 */

export var triggerSingleRenderPlugin = function triggerSingleRenderPlugin(lazyCtx, config) {
  var skipOptions = {
    skipFuncObjKeys: ['props'],
    skipKeys: ['action']
  };
  var normalizedRenderConfig = normalizeConfig(config);
  var isTwiceTrigger = normalizedRenderConfig.type === 'button' || normalizedRenderConfig.type === 'link' || normalizedRenderConfig.type === 'icon';
  var renderNode = triggerPlugin('render', isTwiceTrigger ? lazyCtx : getLazyCtx(lazyCtx), normalizedRenderConfig, skipOptions, true);
  var actionsConfig = normalizedRenderConfig.action; // button, icon 会触发两次triggerRenderPlugin，第一次不绑定action

  if (!actionsConfig || isTwiceTrigger) {
    return renderNode;
  } // 绑定rope-container


  var rope = new Rope({
    trigger: function trigger(ctx, config) {
      // 这里config的 before, error, final 已经被剔除了
      return triggerActionPlugin(ctx, config);
    }
  });
  var arrayActionsConfig = [];
  toArrayActions(actionsConfig, arrayActionsConfig);

  var _trigger = arrayActionsConfig.reduce(function (memo, actionConfig) {
    var normalizedActionConfig = normalizeConfig(actionConfig, 'request');
    memo.use(normalizedActionConfig);
    return memo;
  }, rope).proxy();

  var disabled = normalizedRenderConfig.disabled,
      confirm = normalizedRenderConfig.confirm,
      tooltip = normalizedRenderConfig.tooltip;
  return /*#__PURE__*/React.createElement(RopeContainer, {
    disabled: disabled,
    confirm: confirm,
    tooltip: tooltip,
    trigger: function trigger() {
      var ctx = getLazyCtx(lazyCtx);

      _trigger(ctx);
    }
  }, renderNode);
};
/**
 * 行为插件
 */

var formPluginsName = ['submit', 'back', 'actionsRender', 'fields', 'container', 'remoteValues'];
var actionSkipKeysMap = {
  request: ['convertParams', 'converter'],
  modalform: formPluginsName,
  drawerform: formPluginsName
};
export var triggerActionPlugin = function triggerActionPlugin(lazyCtx, config) {
  // submit, remoteValues省略request
  var normalizedConfig = normalizeConfig(config, 'request');
  var finalSkipOptions;

  if (isString(normalizedConfig.type)) {
    var pluginName = toLower(normalizedConfig.type);
    finalSkipOptions = {
      skipKeys: actionSkipKeysMap[pluginName]
    };
  }

  return triggerPlugin('action', getLazyCtx(lazyCtx), normalizedConfig, finalSkipOptions);
};
/**
 * 归一化actions
 */

export function toArrayActions(actions, actionsChain) {
  var arrayAction = toArray(actions);
  arrayAction.forEach(function (action) {
    getNextAction(action, actionsChain);
  });
}

function getNextAction(action, actionsChain) {
  if (isArray(action)) {
    toArrayActions(action, actionsChain);
  } else if (action.finish) {
    var nextAction = action.finish,
        restAction = _objectWithoutProperties(action, ["finish"]);

    actionsChain.push(restAction);
    toArrayActions(nextAction, actionsChain);
  } else {
    actionsChain.push(action);
  }
}
/**
 * 归一化配置
 */


export function normalizeConfig(config, type) {
  if (isString(config) || isFunction(config)) {
    return {
      type: config
    };
  } else if (type) {
    return assign({
      type: type
    }, config);
  }

  return config;
}