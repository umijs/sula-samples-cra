import "antd/es/popconfirm/style";
import _Popconfirm from "antd/es/popconfirm";
import "antd/es/tooltip/style";
import _Tooltip from "antd/es/tooltip";

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

import React from 'react';
import assign from 'lodash/assign';
import isObject from 'lodash/isObject';

var RopeContainer = /*#__PURE__*/function (_React$Component) {
  _inherits(RopeContainer, _React$Component);

  var _super = _createSuper(RopeContainer);

  function RopeContainer() {
    var _this;

    _classCallCheck(this, RopeContainer);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    _this.state = {
      popconfirmVisible: false,
      tooltipVisible: false
    };

    _this.onTooltipVisibleChange = function (visible) {
      _this.setState({
        tooltipVisible: _this.state.popconfirmVisible ? false : visible // tooltipVisible: visible,

      });
    };

    _this.onPopconfirmVisibleChange = function (visible) {
      _this.setState({
        popconfirmVisible: visible,
        tooltipVisible: false
      });
    };

    _this.renderTriggerElement = function () {
      var disabled = _this.props.disabled === true;
      var _this$props = _this.props,
          confirm = _this$props.confirm,
          children = _this$props.children,
          trigger = _this$props.trigger;

      if (disabled) {
        return React.cloneElement(children, {
          disabled: disabled
        });
      }

      if (confirm) {
        return children;
      } else {
        return React.cloneElement(children, {
          onClick: trigger
        });
      }
    };

    _this.renderTooltipElement = function (triggerElement) {
      var tooltipVisible = _this.state.tooltipVisible;
      var tooltip = _this.props.tooltip;

      if (!tooltip) {
        return triggerElement;
      }

      return React.createElement(_Tooltip, assign(transferToObj(tooltip, 'title'), {
        visible: tooltipVisible,
        onVisibleChange: _this.onTooltipVisibleChange
      }), triggerElement);
    };

    _this.renderPopconfirmElement = function (tooltipElement) {
      var popconfirmVisible = _this.state.popconfirmVisible;
      var _this$props2 = _this.props,
          confirm = _this$props2.confirm,
          trigger = _this$props2.trigger;
      var disabled = _this.props.disabled === true;

      if (disabled || !confirm) {
        return tooltipElement;
      }

      return React.createElement(_Popconfirm, assign(transferToObj(confirm, 'title'), {
        onConfirm: trigger,
        visible: popconfirmVisible,
        onVisibleChange: _this.onPopconfirmVisibleChange
      }), tooltipElement);
    };

    return _this;
  }

  _createClass(RopeContainer, [{
    key: "render",
    value: function render() {
      var triggerElement = this.renderTriggerElement();
      var tooltipElement = this.renderTooltipElement(triggerElement);
      var popconfirmElement = this.renderPopconfirmElement(tooltipElement);
      return popconfirmElement;
    }
  }]);

  return RopeContainer;
}(React.Component);

export { RopeContainer as default };

function transferToObj(cof, key) {
  return isObject(cof) ? cof : _defineProperty({}, key, cof);
}