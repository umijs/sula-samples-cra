import "antd/es/spin/style";
import _Spin from "antd/es/spin";
import "antd/es/result/style";
import _Result from "antd/es/result";
import "antd/es/steps/style";
import _Steps from "antd/es/steps";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

import React from 'react';
import cx from 'classnames';
import omit from 'lodash/omit';
import Memorize from './memorize';
import { Form, FieldGroup, FormAction } from '../form';
import LocaleReceiver from '../localereceiver';
import { transformSubmit } from '../template-create-form/CreateForm';
import './style/step-form.less';
var Step = _Steps.Step;
var MemorizeItem = Memorize.Item;

var StepForm = /*#__PURE__*/function (_React$Component) {
  _inherits(StepForm, _React$Component);

  var _super = _createSuper(StepForm);

  function StepForm() {
    var _this;

    _classCallCheck(this, StepForm);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    _this.state = {
      current: 0,
      loading: false
    };

    _this.getStepName = function (stepIndex) {
      return "@@step".concat(stepIndex);
    };

    _this.nextStep = function () {
      _this.setState({
        current: _this.state.current + 1
      });
    };

    _this.previousStep = function () {
      _this.setState({
        current: _this.state.current - 1
      });
    };

    _this.renderStepActions = function (stepType, locale) {
      var _this$props = _this.props,
          mode = _this$props.mode,
          submit = _this$props.submit,
          result = _this$props.result;
      var isView = mode === 'view';
      var current = _this.state.current; // 取消或者返回

      var cancelAction = {
        type: 'button',
        props: {
          children: mode === 'create' ? locale.cancelText : locale.backText
        },
        action: 'back'
      };
      var okAction = {
        type: 'button',
        props: {
          children: locale.backText
        },
        action: 'back'
      }; // 上一步

      var previousAction = {
        type: 'button',
        props: {
          children: locale.previousText
        },
        action: [_this.previousStep]
      }; // 下一步

      var nextAction = {
        type: 'button',
        props: {
          type: 'primary',
          children: locale.nextText
        },
        action: [_this.nextStep]
      }; // 校验且下一步

      var validateFieldsAndNextAction = {
        type: 'button',
        props: {
          type: 'primary',
          children: locale.nextText
        },
        action: [{
          type: 'validateGroupFields',
          args: [_this.getStepName(current)]
        }, _this.nextStep]
      };
      var submitAction = {
        type: 'button',
        props: {
          type: 'primary',
          children: mode === 'create' ? locale.submitText : locale.updateText
        },
        action: [{
          type: 'validateFields',
          resultPropName: '$fieldsValue'
        }].concat(_toConsumableArray(transformSubmit(submit, result ? _this.nextStep : 'back')))
      };

      if (stepType === 'first') {
        return [isView ? nextAction : validateFieldsAndNextAction, cancelAction];
      } else if (stepType === 'middle') {
        return [isView ? nextAction : validateFieldsAndNextAction, previousAction, cancelAction];
      } else if (stepType === 'submit') {
        return [].concat(_toConsumableArray(isView ? [] : [submitAction]), [previousAction, cancelAction]);
      } else {
        // result
        return [okAction];
      }
    };

    _this.renderStepForm = function (locale) {
      var _this$props2 = _this.props,
          steps = _this$props2.steps,
          result = _this$props2.result,
          direction = _this$props2.direction,
          stepsStyle = _this$props2.stepsStyle,
          formStyle = _this$props2.formStyle,
          restFormProps = _objectWithoutProperties(_this$props2, ["steps", "result", "direction", "stepsStyle", "formStyle"]);

      var loading = _this.state.loading;
      var formProps = omit(restFormProps, ['submit', 'back']);
      var current = _this.state.current;
      var isView = restFormProps.mode === 'view';
      var containerCls = cx('sula-template-step-form', "sula-template-step-form-".concat(direction));
      return /*#__PURE__*/React.createElement("div", {
        className: containerCls
      }, /*#__PURE__*/React.createElement("div", {
        className: "sula-template-step-form-".concat(direction, "-steps"),
        style: stepsStyle
      }, /*#__PURE__*/React.createElement(_Steps, {
        direction: direction,
        size: direction === 'vertical' ? 'small' : 'default',
        current: current
      }, steps.map(function (step, stepIndex) {
        var title = step.title,
            subTitle = step.subTitle,
            description = step.description;
        return /*#__PURE__*/React.createElement(Step, {
          title: title,
          subTitle: subTitle,
          description: description,
          key: stepIndex
        });
      }))), /*#__PURE__*/React.createElement("div", {
        className: "sula-template-step-form-".concat(direction, "-form"),
        style: formStyle
      }, /*#__PURE__*/React.createElement(_Spin, {
        spinning: loading
      }, /*#__PURE__*/React.createElement(Form, _extends({}, formProps, {
        onRemoteValuesStart: function onRemoteValuesStart() {
          _this.setState({
            loading: true
          });
        },
        onRemoteValuesEnd: function onRemoteValuesEnd() {
          _this.setState({
            loading: false
          });
        }
      }), /*#__PURE__*/React.createElement(Memorize, null, steps.map(function (step, stepIndex) {
        var isFirstStep = stepIndex === 0;
        var isSubmitStep = stepIndex === steps.length - 1;
        var stepType;

        if (isFirstStep) {
          stepType = 'first';
        } else if (isSubmitStep) {
          stepType = 'submit';
        } else {
          stepType = 'middle';
        }

        var actionsRender = _this.renderStepActions(stepType, locale);

        var fieldGroupProps = omit(step, ['name', 'title', 'subTitle', 'description']);
        return /*#__PURE__*/React.createElement(MemorizeItem, {
          visible: current === stepIndex,
          key: stepIndex,
          memoId: stepIndex
        }, /*#__PURE__*/React.createElement(FieldGroup, _extends({
          name: _this.getStepName(stepIndex),
          actionsRender: actionsRender
        }, fieldGroupProps)));
      }), result && !isView ? /*#__PURE__*/React.createElement(MemorizeItem, {
        visible: current === steps.length,
        memoId: steps.length
      }, /*#__PURE__*/React.createElement(_Result, {
        className: "sula-template-step-form-".concat(direction, "-result"),
        status: "success",
        title: result.title || locale.successText,
        subTitle: result.subTitle,
        extra: /*#__PURE__*/React.createElement(FormAction, {
          actionsPosition: "center",
          actionsRender: _this.renderStepActions('result', locale)
        })
      })) : null)))));
    };

    return _this;
  }

  _createClass(StepForm, [{
    key: "render",
    value: function render() {
      return /*#__PURE__*/React.createElement(LocaleReceiver, null, this.renderStepForm);
    }
  }]);

  return StepForm;
}(React.Component);

StepForm.defaultProps = {
  direction: 'horizontal',
  mode: 'create'
};
export { StepForm as default };