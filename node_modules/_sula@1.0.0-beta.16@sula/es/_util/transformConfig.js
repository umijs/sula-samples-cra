import { isValidElement } from 'react';
import isFunction from 'lodash/isFunction';
import isNumber from 'lodash/isNumber';
import isBoolean from 'lodash/isBoolean';
import isRegExp from 'lodash/isRegExp';
import isString from 'lodash/isString';
import isArray from 'lodash/isArray';
import isObject from 'lodash/isObject';
import assign from 'lodash/assign';
import moment from 'moment';
import template from './template';
import { assignWithDefined } from './common';
export var defaultSkipOptions = {
  skipFuncObjKeys: [],
  skipKeys: [],
  skipSelector: function skipSelector() {
    return false;
  }
};
export default function transformConfig(obj, params, skipOptions) {
  if (!params) {
    return obj;
  }

  var ctx = isFunction(params) ? params() : params;
  return innerTransformConfig(obj, ctx, assignWithDefined({}, defaultSkipOptions, skipOptions), '');
}

function innerTransformConfig(obj, ctx, skipOptions, parentKey) {
  var _ref = skipOptions,
      skipFuncObjKeys = _ref.skipFuncObjKeys,
      skipKeys = _ref.skipKeys,
      skipSelector = _ref.skipSelector,
      __skipFunc = _ref.__skipFunc;

  if (obj === '' || obj === undefined || obj === null || isNumber(obj) || isBoolean(obj) || isRegExp(obj) || isValidElement(obj) || obj instanceof FormData || moment.isMoment(obj)) {
    return obj;
  }

  if (isFunction(obj)) {
    if (__skipFunc) {
      return obj;
    }

    return obj(ctx);
  } // 如果ctx为空不再转换


  if (!ctx) return obj;
  if (isString(obj)) return template(obj, ctx);

  if (isArray(obj)) {
    return obj.reduce(function (memo, item) {
      memo.push(transformConfig(item, ctx, skipOptions));
      return memo;
    }, []);
  }

  if (isObject(obj)) {
    return Object.keys(obj).reduce(function (memo, key) {
      var isSkip;
      var isSkipFuncObj; // 只针对第一层

      if (!parentKey) {
        isSkip = skipKeys.indexOf(key) > -1;
        isSkip = isSkip || skipSelector && skipSelector(key, parentKey) === true;
        isSkipFuncObj = skipFuncObjKeys.indexOf(key) > -1;
      }

      if (isSkip) {
        memo[key] = obj[key];
      } else if (isSkipFuncObj) {
        memo[key] = transformConfig(obj[key], ctx, assign({}, skipOptions, {
          __skipFunc: true
        }), key);
      } else {
        memo[key] = transformConfig(obj[key], ctx, skipOptions, key);
      }

      return memo;
    }, {});
  }

  return obj;
}