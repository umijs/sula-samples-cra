function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

export var NameListMap = /*#__PURE__*/function () {
  function NameListMap() {
    _classCallCheck(this, NameListMap);

    this.list = [];
  }

  _createClass(NameListMap, [{
    key: "set",
    value: function set(nameList, value) {
      for (var i = 0, len = this.list.length; i < len; i += 1) {
        var listItem = this.list[i];

        if (matchNameList(listItem.nameList, nameList)) {
          // 更新
          this.list[i].value = value;
          return;
        }
      }

      this.list.push({
        nameList: nameList,
        value: value
      });
    }
  }, {
    key: "get",
    value: function get(nameList) {
      for (var i = 0, len = this.list.length; i < len; i += 1) {
        var listItem = this.list[i];

        if (matchNameList(listItem.nameList, nameList)) {
          return listItem.value;
        }
      }

      return null;
    }
  }, {
    key: "delete",
    value: function _delete(nameList) {
      this.list = this.list.filter(function (item) {
        return !matchNameList(item.nameList, nameList);
      });
    }
  }, {
    key: "getNameLists",
    value: function getNameLists() {
      return this.list.map(function (item) {
        return item.nameList;
      });
    }
  }]);

  return NameListMap;
}();
/**
 * ['a'] ['a'] = true
 * ['a'] ['a', 'b'] = false
 */

export function matchNameList(nameListA, nameListB) {
  if (nameListA.length !== nameListB.length) {
    return false;
  }

  return nameListA.every(function (nameUnit, index) {
    return nameListB[index] === nameUnit;
  });
}