function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

import React from 'react';
import isUndefined from 'lodash/isUndefined';
import isBoolean from 'lodash/isBoolean';
import isArray from 'lodash/isArray';
import assign from 'lodash/assign';
import { HOOK_MARK, rootGroupName } from './FieldGroupContext';
import { NameListMap, matchNameList } from '../_util/NameListMap';
import { toArray } from 'antd/lib/form/util';
import transStore from '../_util/filterStore';

var ContextStore = /*#__PURE__*/function () {
  function ContextStore(formInstance) {
    var _this = this;

    _classCallCheck(this, ContextStore);

    this.fieldsByGroup = {};
    this.fieldNameMap = new NameListMap();
    this.groupsByParentGroup = {};
    this.formDependency = void 0;
    this.formInstance = void 0;
    this.formProps = void 0;

    this.getContext = function () {
      return {
        getForm: function getForm() {
          return _this.getForm();
        },
        getInternalHooks: _this.getInternalHooks
      };
    };

    this.getForm = function () {
      return _objectSpread(_objectSpread({}, _this.formInstance), {}, {
        /**
         * 覆盖的方法
         */
        validateFields: _this.validateFields,

        /**
         * 扩展的方法
         */
        validateGroupFields: _this.validateGroupFields,
        getFieldSource: _this.getFieldSource,
        getFieldDisabled: _this.getFieldDisabled,
        setFieldVisible: _this.setFieldVisible,
        setFieldDisabled: _this.setFieldDisabled,
        setFieldSource: _this.setFieldSource,
        setFieldValue: _this.setFieldValue,
        setFieldsValue: _this.setFieldsValue,
        setFields: _this.setFields
      });
    };

    this.validateFields = function (nameList) {
      if (isBoolean(nameList) && nameList) {
        return _this.formInstance.validateFields();
      }

      var visibleFieldsName = []; // 从nameList剔除不显示的

      if (nameList) {
        _this.getVisibleFieldsName(nameList, visibleFieldsName);
      } else {
        var rootFieldGroups = _this.groupsByParentGroup[rootGroupName];

        _this.getVisibleFieldsNameFromGroup(rootFieldGroups, visibleFieldsName);
      }

      return _this.formInstance.validateFields(visibleFieldsName);
    };

    this.validateGroupFields = function (groupName) {
      var visibleFieldsName = [];

      var fieldGroup = _this.fieldNameMap.get(toArray(groupName));

      _this.getVisibleFieldsNameFromGroup([fieldGroup], visibleFieldsName);

      return _this.formInstance.validateFields(visibleFieldsName);
    };

    this.getFieldSource = function (name) {
      var field = _this.getField(name);

      return field.getSource();
    };

    this.getFieldDisabled = function (name) {
      var field = _this.getField(name);

      return field.getDisabled();
    };

    this.setFieldVisible = function (name, visible) {
      var field = _this.getField(name);

      field.setVisible(visible);
    };

    this.setFieldDisabled = function (name, disabled) {
      var field = _this.getField(name);

      field.setDisabled(disabled);
    };

    this.setFieldSource = function (name, source) {
      var field = _this.getField(name);

      field.setSource(source);
    };

    this.setFieldValue = function (name, value) {
      // 1. 设置值
      var fieldData = [{
        name: toArray(name),
        value: value,
        errors: [] // setFieldValue 使用 setFields 实现，需要显式clear errors

      }];

      _this.formInstance.setFields(fieldData); // 2. 触发级联


      _this.cascade(fieldData); // 3. 通知更新


      _this.notifyFieldReRender(fieldData);
    };

    this.setFieldsValue = function (store) {
      // 1. 设置值
      _this.formInstance.setFieldsValue(store); // 2. 触发级联


      _this.cascade(store, {
        cascadeTrigger: 'setFieldsValue',
        cascadeStore: store
      }); // 3. 触发值更新


      _this.notifyFieldReRender(store);
    };

    this.setFields = function (store) {
      _this.formInstance.setFields(store);

      var finalStore = store.reduce(function (memo, item) {
        if (item.hasOwnProperty('value')) {
          memo.push({
            name: toArray(item.name),
            value: item.value
          });
        }

        return memo;
      }, []);

      if (finalStore.length) {
        // 2. 触发级联
        _this.cascade(finalStore, {
          cascadeTrigger: 'setFieldsValue',
          cascadePayload: store
        }); // 3. 通知更新


        _this.notifyFieldReRender(finalStore);
      }
    };

    this.getInternalHooks = function (key) {
      if (key === HOOK_MARK) {
        return {
          registerField: _this.registerField,
          registerFieldGroup: _this.registerFieldGroup,
          saveFormDependency: function saveFormDependency(formDependency) {
            _this.formDependency = formDependency;
          },
          getFormDependency: function getFormDependency() {
            return _this.formDependency;
          },
          saveFormProps: function saveFormProps(formProps) {
            _this.formProps = formProps;
          },
          getCtx: _this.getCtx,
          cascade: _this.cascade
        };
      }
    };

    this.getCtx = function () {
      var extraCtx = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      var form = _this.getForm();

      var finalCtx = assign(extraCtx, {
        form: form,
        mode: _this.formProps.mode || 'create'
      });

      if (_this.formProps.ctxGetter) {
        finalCtx.ctxGetter = _this.formProps.ctxGetter;
      }

      return finalCtx;
    };

    this.registerField = function (groupName, field) {
      var isFieldGroup = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
      var fieldNameList = field.getName(); // 如果没有name的field不放入到fieldMap中

      if (isUndefined(fieldNameList)) {
        return;
      }

      _this.fieldNameMap.set(fieldNameList, field);

      if (isFieldGroup) {
        // cancelRegisterFieldGroup
        return function () {
          _this.fieldNameMap.delete(fieldNameList);
        };
      }

      if (_this.fieldsByGroup[groupName]) {
        _this.fieldsByGroup[groupName].push(field);
      } else {
        _this.fieldsByGroup[groupName] = [field];
      } // cancelRegisterField


      return function () {
        _this.fieldNameMap.delete(fieldNameList);

        _this.fieldsByGroup[groupName] = _this.fieldsByGroup[groupName].filter(function (item) {
          return item !== field;
        });
      };
    };

    this.registerFieldGroup = function (parentGroupName, fieldGroup) {
      if (_this.groupsByParentGroup[parentGroupName]) {
        _this.groupsByParentGroup[parentGroupName].push(fieldGroup);
      } else {
        _this.groupsByParentGroup[parentGroupName] = [fieldGroup];
      } // cancelRegisterFieldGroup


      return function () {
        _this.groupsByParentGroup[parentGroupName] = _this.groupsByParentGroup[parentGroupName].filter(function (item) {
          return item !== fieldGroup;
        });
      };
    };

    this.cascade = function (store) {
      var cascadePayload = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      var cascades = _this.formDependency.getCascades();

      if (cascades && cascades.length) {
        var finalStore = store; // setFieldsValue的场景

        if (!isArray(store)) {
          finalStore = transStore(store, cascades);
        }

        var cascadeStore = finalStore.filter(function (item) {
          return cascades.some(function (cascade) {
            var fieldNameList = item.name;
            return matchNameList(fieldNameList, cascade);
          });
        });

        if (cascadeStore.length) {
          _this.formDependency.cascade(_this.getCtx(), cascadeStore, cascadePayload);
        }
      }
    };

    this.getField = function (name) {
      return _this.fieldNameMap.get(toArray(name));
    };

    this.getVisibleFieldsName = function (fieldsName, visibleFieldsName) {
      fieldsName.forEach(function (fieldName) {
        if (isUndefined(fieldName)) {
          return;
        }

        var fieldNameList = toArray(fieldName);

        var field = _this.getField(fieldNameList);

        if (field.getVisible() === false || field.getCollect() === false) {
          return;
        }

        visibleFieldsName.push(fieldNameList);
      });
    };

    this.getVisibleFieldsNameFromGroup = function () {
      var fieldGroups = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
      var visibleFieldsName = arguments.length > 1 ? arguments[1] : undefined;
      fieldGroups.forEach(function (fieldGroup) {
        if (fieldGroup.getVisible() === false) {
          return;
        } // 处理 group 的子 group


        _this.getVisibleFieldsNameFromGroup(_this.groupsByParentGroup[fieldGroup.getGroupName()], visibleFieldsName); // 处理 group 的子 fields


        var fieldNameLists = (_this.fieldsByGroup[fieldGroup.getGroupName()] || []).map(function (field) {
          return field.getName();
        });

        _this.getVisibleFieldsName(fieldNameLists, visibleFieldsName);
      });
    };

    this.formInstance = formInstance;
  }

  _createClass(ContextStore, [{
    key: "notifyFieldReRender",
    // 通知 Field 组件更新
    value: function notifyFieldReRender(store) {
      var _this2 = this;

      var finalStore = store;

      if (!isArray(store)) {
        finalStore = transStore(store, this.fieldNameMap.getNameLists());
      }

      finalStore.forEach(function (_ref) {
        var name = _ref.name;

        var field = _this2.getField(name);

        field.reRender();
      });
    } // ==================== Helper ===================

  }]);

  return ContextStore;
}();

export default function useFormContext(formInstance) {
  var contextRef = React.useRef(null);

  if (!contextRef.current) {
    var contextStore = new ContextStore(formInstance);
    contextRef.current = contextStore.getContext();
  }

  return [contextRef.current];
}