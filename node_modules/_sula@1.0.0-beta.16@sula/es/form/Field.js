import "antd/es/col/style";
import _Col from "antd/es/col";
import "antd/es/form/style";
import _Form from "antd/es/form";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

import React from 'react';
import isUndefined from 'lodash/isUndefined';
import uniqueId from 'lodash/uniqueId';
import omit from 'lodash/omit';
import assign from 'lodash/assign';
import { toArray, assignWithDefined } from '../_util/common';
import FieldGroupContext, { HOOK_MARK } from './FieldGroupContext';
import { triggerFieldPlugin, triggerActionPlugin, triggerRenderPlugin, triggerPlugin } from '../rope/triggerPlugin';
import { needWrapCols } from './utils/layoutUtil';
var FormItem = _Form.Item;

var Field = /*#__PURE__*/function (_React$Component) {
  _inherits(Field, _React$Component);

  var _super = _createSuper(Field);

  function Field() {
    var _this;

    _classCallCheck(this, Field);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    _this.inited = false;
    _this.destroy = false;
    _this.source = void 0;
    _this.disabled = void 0;
    _this.visible = void 0;
    _this.collect = void 0;
    _this.fieldName = void 0;
    _this.cancelRegisterField = null;

    _this.cancelRegister = function () {
      if (_this.cancelRegisterField) {
        _this.cancelRegisterField();
      }

      _this.cancelRegisterField = null;
    };

    _this.initFieldSource = function (ctx) {
      if (_this.props.remoteSource && _this.props.remoteSource.init !== false) {
        triggerActionPlugin(ctx, _this.props.remoteSource).then(function (data) {
          ctx.form.setFieldSource(_this.getName(), data);
        });
      }
    };

    _this.transChildrenToElems = function (ctx, children) {
      var childrenElems = []; // 配置方式全部转换为组件

      children.forEach(function (childConfig, index) {
        var childKey = childConfig.name || "".concat(_this.fieldName, "-child-").concat(index);
        var childElem;

        if (childConfig.field) {
          childElem = /*#__PURE__*/React.createElement(Field, _extends({}, childConfig, {
            key: childKey
          }));
        } else if (childConfig.render) {
          // 认为是render
          var renderPlugin = childConfig.render;
          var finalChildConfig = omit(childConfig, ['render']);
          childElem = /*#__PURE__*/React.createElement(Field, _extends({
            key: childKey
          }, finalChildConfig), triggerRenderPlugin(ctx, renderPlugin));
        }

        childrenElems.push(childElem);
      });
      return childrenElems;
    };

    return _this;
  }

  _createClass(Field, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this$context$formCon = this.context.formContext.getInternalHooks(HOOK_MARK),
          registerField = _this$context$formCon.registerField,
          getFormDependency = _this$context$formCon.getFormDependency,
          getCtx = _this$context$formCon.getCtx;

      this.initFieldSource(getCtx());
      var parentGroupName = this.context.parentGroupName;
      this.cancelRegisterField = registerField(parentGroupName, this);

      if (!this.props.dependency) {
        return;
      } // field 依赖


      var formDependency = getFormDependency();
      formDependency.parseFormDependency(this.props);
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.cancelRegister();
      this.destroy = true;
    }
  }, {
    key: "getName",
    value: function getName() {
      if (!isUndefined(this.props.name)) {
        return toArray(this.props.name);
      }
    }
  }, {
    key: "getSource",
    value: function getSource() {
      return this.source;
    }
  }, {
    key: "getDisabled",
    value: function getDisabled() {
      return this.disabled;
    }
  }, {
    key: "setSource",
    value: function setSource(source) {
      this.source = source;
      this.reRender();
    }
  }, {
    key: "setVisible",
    value: function setVisible(visible) {
      this.visible = visible;
      this.reRender();
    }
  }, {
    key: "setDisabled",
    value: function setDisabled(disabled) {
      this.disabled = disabled;
      this.reRender();
    }
  }, {
    key: "getVisible",
    value: function getVisible() {
      return this.visible;
    }
  }, {
    key: "getCollect",
    value: function getCollect() {
      return this.collect;
    }
  }, {
    key: "reRender",
    value: function reRender() {
      if (this.destroy) return;
      this.forceUpdate();
    }
    /**
     *
     */

  }, {
    key: "renderField",
    value: function renderField(ctx, fieldConfig, extraConf) {
      var itemLayout = extraConf.itemLayout,
          visible = extraConf.visible,
          childrenContainer = extraConf.childrenContainer,
          formItemProps = extraConf.formItemProps;
      var children = formItemProps.children,
          _formItemProps$valueP = formItemProps.valuePropName,
          valuePropName = _formItemProps$valueP === void 0 ? 'value' : _formItemProps$valueP;
      var wrapperCol = itemLayout.wrapperCol,
          labelCol = itemLayout.labelCol;
      var fieldElem;

      if (children) {
        if (React.isValidElement(children)) {
          fieldElem = children;
        } else {
          // 配置型children
          fieldElem = this.transChildrenToElems(ctx, children);

          if (childrenContainer) {
            var childrenContainerElem = triggerRenderPlugin(ctx, childrenContainer);
            fieldElem = React.cloneElement(childrenContainerElem, {
              children: fieldElem
            });
          }
        }
      } else {
        fieldElem = triggerFieldPlugin(ctx, fieldConfig, valuePropName);
      }

      var fieldItemElem = /*#__PURE__*/React.createElement(FormItem, _extends({
        labelCol: labelCol,
        wrapperCol: wrapperCol
      }, formItemProps), fieldElem);

      if (needWrapCols(itemLayout.span)) {
        return /*#__PURE__*/React.createElement(_Col, {
          style: {
            display: visible === false ? 'none' : ''
          },
          span: itemLayout.span,
          offset: itemLayout.offset
        }, fieldItemElem);
      } else {
        return React.cloneElement(fieldItemElem, {
          style: assign({}, fieldItemElem.props.style, {
            display: visible === false ? 'none' : ''
          })
        });
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props = this.props,
          fieldProps = _this$props.field,
          initialSource = _this$props.initialSource,
          initialVisible = _this$props.initialVisible,
          initialDisabled = _this$props.initialDisabled,
          collect = _this$props.collect,
          remoteSource = _this$props.remoteSource,
          itemLayout = _this$props.itemLayout,
          childrenContainer = _this$props.childrenContainer,
          restProps = _objectWithoutProperties(_this$props, ["field", "initialSource", "initialVisible", "initialDisabled", "collect", "remoteSource", "itemLayout", "childrenContainer"]);

      if (!this.inited) {
        this.inited = true;
        this.fieldName = getFieldName(this.props.name);
        this.collect = collect !== false;
        this.source = initialSource;
        this.visible = initialVisible;
        this.disabled = initialDisabled;
      }

      var formItemProps = restProps;

      if (restProps.rules && restProps.rules.length) {
        formItemProps.rules = restProps.rules.map(function (rule) {
          if (rule.validator) {
            return {
              validator: function validator(_, value) {
                var validatorCtx = getCtx({
                  value: value,
                  name: _this2.props.name
                });
                return triggerPlugin('validator', validatorCtx, rule.validator);
              }
            };
          }

          return rule;
        });
      }

      var _this$context = this.context,
          formContext = _this$context.formContext,
          layout = _this$context.layout;

      var _formContext$getInter = formContext.getInternalHooks(HOOK_MARK),
          getCtx = _formContext$getInter.getCtx;

      var ctx = getCtx({
        disabled: this.disabled,
        source: this.source
      });
      var extraConfig = {
        layout: layout,
        itemLayout: assignWithDefined({}, this.context.itemLayout, itemLayout),
        visible: this.visible,
        childrenContainer: childrenContainer,
        formItemProps: formItemProps
      };
      var fieldNode = this.renderField(ctx, fieldProps, extraConfig);
      return fieldNode;
    }
  }]);

  return Field;
}(React.Component);

Field.contextType = FieldGroupContext;
export { Field as default };

function getFieldName(fieldName) {
  return fieldName || uniqueId('fieldName_');
}