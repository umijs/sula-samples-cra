import "antd/es/form/style";
import _Form from "antd/es/form";

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

import React from 'react';
import omit from 'lodash/omit';
import FieldGroupContext, { rootGroupName, HOOK_MARK } from './FieldGroupContext';
import { getItemLayout } from './utils/layoutUtil';
import { FieldGroup } from '.';
import useFormContext from './useFormContext';
import FormDependency from './dependency';
import { triggerActionPlugin } from '../rope/triggerPlugin';
import MediaQueries from './MediaQueries';

var Form = function Form(props, ref) {
  var _AForm$useForm = _Form.useForm(),
      _AForm$useForm2 = _slicedToArray(_AForm$useForm, 1),
      formInstance = _AForm$useForm2[0];

  var _useFormContext = useFormContext(formInstance),
      _useFormContext2 = _slicedToArray(_useFormContext, 1),
      context = _useFormContext2[0];

  React.useImperativeHandle(ref, context.getForm);

  var _context$getInternalH = context.getInternalHooks(HOOK_MARK),
      saveFormProps = _context$getInternalH.saveFormProps,
      saveFormDependency = _context$getInternalH.saveFormDependency,
      cascade = _context$getInternalH.cascade,
      getCtx = _context$getInternalH.getCtx;

  var formDependencyRef = React.useRef(new FormDependency());
  saveFormDependency(formDependencyRef.current);
  saveFormProps(props);
  var _props$layout = props.layout,
      layout = _props$layout === void 0 ? 'horizontal' : _props$layout,
      itemLayout = props.itemLayout,
      _props$size = props.size,
      size = _props$size === void 0 ? 'middle' : _props$size,
      mode = props.mode,
      remoteValues = props.remoteValues,
      initialValues = props.initialValues,
      container = props.container,
      fields = props.fields,
      children = props.children,
      actionsRender = props.actionsRender,
      actionsPosition = props.actionsPosition,
      onRemoteValuesStart = props.onRemoteValuesStart,
      onRemoteValuesEnd = props.onRemoteValuesEnd;
  React.useEffect(function () {
    var ctx = getCtx();

    if (initialValues) {
      ctx.form.setFieldsValue(initialValues);
    }

    if (mode !== 'create' && remoteValues && remoteValues.init !== false) {
      onRemoteValuesStart && onRemoteValuesStart();
      triggerActionPlugin(ctx, remoteValues).then(function (fieldsValue) {
        ctx.form.setFieldsValue(fieldsValue);
        onRemoteValuesEnd && onRemoteValuesEnd();
      }).catch(function () {
        onRemoteValuesEnd && onRemoteValuesEnd();
      });
    }
  }, []);
  var finalChildren = fields ? /*#__PURE__*/React.createElement(FieldGroup, {
    fields: fields,
    container: container,
    actionsRender: actionsRender,
    actionsPosition: actionsPosition
  }) : children;
  var formProps = omit(props, ['itemLayout', 'mode', 'remoteValues', 'container', 'fields', 'children', 'actionsRender', 'actionsPosition', 'ctxGetter', 'onRemoteValuesStart', 'onRemoteValuesEnd']);
  var originValuesChange = formProps.onValuesChange;

  formProps.onValuesChange = function (changedValue, allValues) {
    cascade(changedValue);

    if (originValuesChange) {
      originValuesChange(changedValue, allValues);
    }
  };

  return /*#__PURE__*/React.createElement(MediaQueries, null, function (matchedPoint) {
    var normalizedItemLayout = getItemLayout(itemLayout, layout, matchedPoint);
    var fieldGroupContext = {
      formContext: context,
      layout: layout,
      itemLayout: normalizedItemLayout,
      parentGroupName: rootGroupName,
      size: size,
      matchedPoint: matchedPoint
    };
    var wrapperChildren = /*#__PURE__*/React.createElement(FieldGroupContext.Provider, {
      value: fieldGroupContext
    }, finalChildren);
    return /*#__PURE__*/React.createElement(_Form, _extends({}, formProps, {
      wrapperCol: normalizedItemLayout.wrapperCol,
      labelCol: normalizedItemLayout.labelCol,
      children: wrapperChildren,
      form: formInstance
    }));
  });
};

export default Form;