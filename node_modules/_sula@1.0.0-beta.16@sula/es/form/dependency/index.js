function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

import isEmpty from 'lodash/isEmpty';
import omit from 'lodash/omit';
import DepStore from './DepStore';
var DEP_NAME = 'dependency';

var FormDependency = function FormDependency() {
  var _this = this;

  _classCallCheck(this, FormDependency);

  this.depStore = void 0;

  this.parseFormDependency = function (fieldConfig) {
    var dependencies = fieldConfig[DEP_NAME];

    if (isEmpty(dependencies)) {
      return fieldConfig;
    }

    _this.depStore.parse(fieldConfig.name, dependencies, fieldConfig);

    return omit(fieldConfig, [DEP_NAME]);
  };

  this.getCascades = function () {
    return _this.depStore.depsByFieldNameList.getNameLists();
  };

  this.cascade = function (ctx, store, cascadePayload) {
    store.forEach(function (item) {
      var cascadeFieldNameList = item.name;

      var depsOfType = _this.depStore.depsByFieldNameList.get(cascadeFieldNameList);

      if (depsOfType) {
        _this.depStore.triggerDependency(ctx, depsOfType, cascadePayload);
      }
    });
  };

  this.depStore = new DepStore();
};

export { FormDependency as default };