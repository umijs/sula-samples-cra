function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

import { NameListMap } from '../../_util/NameListMap';
import { toArray } from '../../_util/common';
import assign from 'lodash/assign';
import isUndefined from 'lodash/isUndefined';
import isObject from 'lodash/isObject';
import isEqual from 'lodash/isEqual';
import { triggerPlugin, triggerActionPlugin } from '../../rope/triggerPlugin';

var DepStore = /*#__PURE__*/function () {
  function DepStore() {
    _classCallCheck(this, DepStore);

    this.depsByFieldNameList = new NameListMap();
  }

  _createClass(DepStore, [{
    key: "parse",
    value: function parse(fieldName, deps, fieldConfig) {
      var _this = this;

      var fieldNameList = toArray(fieldName);
      Object.keys(deps).forEach(function (type) {
        var dependency = deps[type];

        var cases = dependency.cases,
            globalDep = _objectWithoutProperties(dependency, ["cases"]);

        if (cases) {
          cases.forEach(function (kase, index) {
            var finalDep = assign({}, globalDep, kase);

            _this.parseCase(fieldNameList, type, finalDep, fieldConfig, index);
          });
        } else {
          _this.parseCase(fieldNameList, type, globalDep, fieldConfig);
        }
      });
    }
  }, {
    key: "parseCase",
    value: function parseCase(fieldNameList, type, dependency, fieldConfig, caseIndex) {
      var _this2 = this;

      var relates = dependency.relates,
          inputs = dependency.inputs,
          output = dependency.output,
          defaultOutput = dependency.defaultOutput,
          ignores = dependency.ignores,
          depPlugin = dependency.type,
          autoResetValue = dependency.autoResetValue;
      var relatedFieldNameLists = relates.map(function (relate) {
        return toArray(relate);
      }); // 被动配置变主动

      relatedFieldNameLists.forEach(function (relatedFieldNameList) {
        if (!_this2.depsByFieldNameList.get(relatedFieldNameList)) {
          _this2.depsByFieldNameList.set(relatedFieldNameList, Object.create(null));
        } // 变为主动存储


        var transedDependency = _objectSpread({
          name: fieldNameList,
          type: depPlugin,
          relates: relatedFieldNameLists,
          ignores: normalizeIgnores(ignores, relatedFieldNameLists.length),
          inputs: inputs,
          output: output,
          defaultOutput: defaultOutput,
          autoResetValue: autoResetValue !== false
        }, type === 'source' ? {
          remoteSource: fieldConfig.remoteSource
        } : {});

        if (_this2.depsByFieldNameList.get(relatedFieldNameList)[type]) {
          if (!isUndefined(caseIndex)) {
            if (caseIndex === 0) {
              _this2.depsByFieldNameList.get(relatedFieldNameList)[type].push([transedDependency]);
            } else {
              var depsOfType = _this2.depsByFieldNameList.get(relatedFieldNameList)[type];

              var lastDepOfType = depsOfType[depsOfType.length - 1];
              lastDepOfType.push(transedDependency);
            }
          } else {
            _this2.depsByFieldNameList.get(relatedFieldNameList)[type].push([transedDependency]);
          }
        } else {
          _this2.depsByFieldNameList.get(relatedFieldNameList)[type] = [[transedDependency]];
        }
      });
    }
  }, {
    key: "triggerDependency",
    value: function triggerDependency(ctx, depsOfType, cascadePayload) {
      var _this3 = this;

      var form = ctx.form;
      Object.keys(depsOfType).forEach(function (type) {
        var allDeps = depsOfType[type];
        allDeps.forEach(function (deps) {
          for (var i = 0, len = deps.length; i < len; i += 1) {
            var isLastCase = i === deps.length - 1;
            var dep = deps[i];
            var affectedFieldNameList = dep.name,
                relates = dep.relates,
                inputs = dep.inputs,
                ignores = dep.ignores,
                output = dep.output,
                defaultOutput = dep.defaultOutput,
                depPlugin = dep.type,
                autoResetValue = dep.autoResetValue;

            if (type === 'value') {
              // 如果受影响的fieldName在主动设置store里则不出值关联
              var isWilling = isWillingSetValue(affectedFieldNameList, cascadePayload);

              if (isWilling) {
                return true;
              }
            }

            var values = relates.map(function (relatedFieldNameList) {
              return form.getFieldValue(relatedFieldNameList);
            });

            if (depPlugin) {
              if (type === 'source' && !autoResetValue) {
                clearValueForSourceDependency(affectedFieldNameList, ctx, cascadePayload);
              }

              var depPluginCtx = assign({}, ctx, {
                name: affectedFieldNameList,
                values: values,
                relates: relates
              });
              var isMatched = triggerPlugin('dependency', depPluginCtx, dep); // 如果显示返回false则表示匹配失败

              if (isMatched !== false) {
                return;
              }
            }

            var fn = void 0;

            if (type === 'source') {
              fn = autoResetValue ? function (_name, _source) {
                clearValueForSourceDependency(_name, ctx, cascadePayload);
                form.setFieldSource(_name, _source);
              } : form.setFieldSource;
            } else if (type === 'disabled') {
              fn = form.setFieldDisabled;
            } else if (type === 'visible') {
              fn = form.setFieldVisible;
            } else {
              fn = form.setFieldValue;
            }

            var isIgnored = singleMatch(ignores, values);

            if (isIgnored) {
              if (isLastCase) {
                fn(affectedFieldNameList, defaultOutput);
              } // 如果忽略但非最后一个case则跳过


              continue;
            }
            /**
             * 远程数据源关联只执行一个case
             */


            if (type === 'source' && !inputs && dep.remoteSource) {
              return _this3.cascadeSource(ctx, dep, cascadePayload);
            }

            var isAllMatched = allMatch(inputs, values); // 第一个匹配的终止

            if (isAllMatched) {
              fn(affectedFieldNameList, output);
              return;
            } // 均为匹配到，且是最后一个case，使用defaultOutput


            if (isLastCase) {
              fn(affectedFieldNameList, defaultOutput);
            }
          }
        });
      });
    }
  }, {
    key: "cascadeSource",
    value: function cascadeSource(ctx, dep, cascadePayload) {
      var form = ctx.form;
      var name = dep.name,
          relates = dep.relates,
          remoteSource = dep.remoteSource,
          autoResetValue = dep.autoResetValue;
      if (dep.inputs || dep.type) return; // 非远程数据源场景

      var fetchDepInfo = relates.reduce(function (memo, relatedFieldNameList) {
        var value = form.getFieldValue(relatedFieldNameList);
        memo[relatedFieldNameList.join('.')] = value;
        return memo;
      }, {});
      return triggerActionPlugin(ctx, assign({}, remoteSource, {
        params: assign({}, remoteSource.params, fetchDepInfo)
      })).then(function (source) {
        autoResetValue && clearValueForSourceDependency(name, ctx, cascadePayload);
        form.setFieldSource(name, source);
      });
    }
  }]);

  return DepStore;
}();

export { DepStore as default };

function clearValueForSourceDependency(fieldNameList, ctx, cascadePayload) {
  var form = ctx.form;
  var isWilling = isWillingSetValue(name, cascadePayload);

  if (!isWilling) {
    form.setFieldValue(fieldNameList, undefined);
  }
}

function isWillingSetValue(fieldNameList, cascadePayload) {
  var cascadeTrigger = cascadePayload.cascadeTrigger,
      cascadeStore = cascadePayload.cascadeStore;
  var isWilling = (cascadeTrigger === 'setFieldsValue' || cascadeTrigger === 'setFields') && hasOwnPropWithNameList(fieldNameList, cascadeStore);
  return isWilling;
}
/**
 * 不清空 - (ctx.cascadeTrigger === setFieldsValue || setFields) && values.hasOwnProperty(x);
 * 否则清空
 */


export function hasOwnPropWithNameList(fieldNameList, payload) {
  var len = fieldNameList.length;
  var recurValue = payload;

  for (var i = 0; i < len; i += 1) {
    var namePath = fieldNameList[i];

    if (isObject(recurValue) && recurValue.hasOwnProperty(namePath)) {
      recurValue = recurValue[name];
    } else {
      // 提前退出
      return false;
    }
  }

  return true;
} // ==================== 匹配inputs / ignores ====================

/**
 * @inputs: [[1,2], [2,3]]
 * @values: [1,4]
 * @result: true
 */

export function singleMatch(inputs, values) {
  return inputs.some(function (input, index) {
    return equal(input, values[index]);
  });
}
/**
 * @rules: [[1,2], [2,3]]
 * @values: [1,4]
 * @result: false
 */

export function allMatch(inputs, values) {
  return !inputs.some(function (input, index) {
    return !equal(input, values[index]);
  });
}
/**
 *
 * @inputs [1,2]
 * @value 1
 * @return true
 */

export function equal(inputs, value) {
  if (inputs === '*') {
    return true;
  }

  for (var i = 0, len = inputs.length; i < len; i += 1) {
    var input = inputs[i];

    if (isEqual(input, value)) {
      return true;
    }
  }

  return false;
}

function normalizeIgnores(ignores, num) {
  if (!ignores) {
    return fill(num, [undefined]);
  }

  return ignores;
}

function fill(num, value) {
  var result = [];

  for (var i = 0; i < num; i += 1) {
    result[i] = value;
  }

  return result;
}