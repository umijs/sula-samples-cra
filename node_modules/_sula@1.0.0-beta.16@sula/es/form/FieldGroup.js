import "antd/es/row/style";
import _Row from "antd/es/row";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

import React from 'react';
import uniqueId from 'lodash/uniqueId';
import isUndefined from 'lodash/isUndefined';
import assign from 'lodash/assign';
import omit from 'lodash/omit';
import pick from 'lodash/pick';
import Field from './Field';
import FieldGroupContext, { HOOK_MARK } from './FieldGroupContext';
import { getItemLayout, needWrapCols } from './utils/layoutUtil';
import { triggerRenderPlugin, normalizeConfig } from '../rope/triggerPlugin';
import { toArray } from '../_util/common';
import FormAction from './FormAction';

var FieldGroup = /*#__PURE__*/function (_React$Component) {
  _inherits(FieldGroup, _React$Component);

  var _super = _createSuper(FieldGroup);

  function FieldGroup() {
    var _this;

    _classCallCheck(this, FieldGroup);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    _this.destory = false;
    _this.inited = false;
    _this.hasDependency = false;
    _this.visible = void 0;
    _this.groupName = void 0;
    _this.cancelRegisterField = null;
    _this.cancelRegisterFieldGroup = null;

    _this.cancelRegister = function () {
      if (_this.cancelRegisterField) {
        _this.cancelRegisterField();
      }

      _this.cancelRegisterField = null;

      if (_this.cancelRegisterFieldGroup) {
        _this.cancelRegisterFieldGroup();
      }

      _this.cancelRegisterFieldGroup = null;
    };

    _this.transFieldToElems = function (ctx, fields) {
      var fieldsElems = []; // 配置方式全部转换为组件

      fields.forEach(function (fieldConfig, index) {
        var fieldKey = fieldConfig.name || "".concat(_this.groupName, "-field-").concat(index);
        var fieldElem;

        if (fieldConfig.container || fieldConfig.fields) {
          fieldElem = /*#__PURE__*/React.createElement(FieldGroup, _extends({}, fieldConfig, {
            key: fieldKey
          }));
        } else if (fieldConfig.render) {
          // 认为是render
          var renderPlugin = fieldConfig.render;
          var finalFieldConfig = omit(fieldConfig, ['render']);
          fieldElem = /*#__PURE__*/React.createElement(Field, _extends({
            key: fieldKey
          }, finalFieldConfig), triggerRenderPlugin(ctx, renderPlugin));
        } else {
          fieldElem = /*#__PURE__*/React.createElement(Field, _extends({}, fieldConfig, {
            key: fieldKey
          }));
        }

        fieldsElems.push(fieldElem);
      });
      return fieldsElems;
    };

    _this.renderChildren = function (ctx, props, extraConf) {
      var itemLayout = extraConf.itemLayout;
      var fields = props.fields;
      var span = itemLayout.span,
          gutter = itemLayout.gutter;
      var children = fields ? _this.transFieldToElems(ctx, fields) : props.children;
      var actionsElem;
      var actionsPosition = props.actionsPosition;

      if (props.actionsRender) {
        actionsElem = /*#__PURE__*/React.createElement(FormAction, {
          key: "".concat(_this.groupName, "-form-action"),
          actionsRender: props.actionsRender,
          actionsPosition: actionsPosition
        });
      }

      var isNeedWrapCols = needWrapCols(span);

      if (!isNeedWrapCols) {
        if (actionsElem) {
          return /*#__PURE__*/React.createElement(React.Fragment, null, children, actionsElem);
        } else {
          return children;
        }
      } // a b c | d e f | g


      var finalChildren = [];
      var groupFieldsElem = [];
      var groupRowIndex = 0;
      React.Children.forEach(children, function (child) {
        var childElem;

        if (child.type === FieldGroup) {
          if (groupFieldsElem.length) {
            var _rowKey = "".concat(_this.groupName, "-row-").concat(groupRowIndex);

            childElem = /*#__PURE__*/React.createElement(_Row, {
              gutter: gutter,
              key: _rowKey
            }, groupFieldsElem);
            groupFieldsElem = [];
            groupRowIndex += 1;
          }

          finalChildren.push(childElem);
          finalChildren.push(child);
        } else if (child.type === FormAction) {
          actionsElem = child;
          actionsPosition = child.props.actionsPosition;
        } else {
          groupFieldsElem.push(child);
        }
      });
      var rowKey = "".concat(_this.groupName, "-row-").concat(groupRowIndex);
      var isDefaultPosition = !actionsPosition || actionsPosition === 'default';

      if (!actionsElem) {
        finalChildren.push( /*#__PURE__*/React.createElement(_Row, {
          gutter: gutter,
          key: rowKey
        }, groupFieldsElem));
      } else {
        if (isDefaultPosition) {
          finalChildren.push( /*#__PURE__*/React.createElement(_Row, {
            gutter: gutter,
            key: rowKey
          }, groupFieldsElem, actionsElem));
        } else {
          finalChildren.push( /*#__PURE__*/React.createElement(_Row, {
            gutter: gutter,
            key: rowKey
          }, groupFieldsElem));
          finalChildren.push(actionsElem);
        }
      }

      return finalChildren;
    };

    _this.renderFieldGroup = function (ctx, props, extraConf) {
      var container = props.container;
      var finalContainer = container || {
        type: function type() {
          return _this.hasDependency ? /*#__PURE__*/React.createElement("div", null) : /*#__PURE__*/React.createElement(React.Fragment, null);
        }
      };

      if (_this.hasDependency) {
        finalContainer = normalizeConfig(finalContainer);
      }

      var containerNode = triggerRenderPlugin(ctx, finalContainer);

      var children = _this.renderChildren(ctx, props, extraConf);

      containerNode = React.cloneElement(containerNode, {
        children: children,
        style: assign({}, containerNode.props.style, {
          display: _this.visible === false ? 'none' : ''
        })
      });
      return containerNode;
    };

    return _this;
  }

  _createClass(FieldGroup, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.inited = true;

      var _this$context$formCon = this.context.formContext.getInternalHooks(HOOK_MARK),
          registerField = _this$context$formCon.registerField,
          registerFieldGroup = _this$context$formCon.registerFieldGroup,
          getFormDependency = _this$context$formCon.getFormDependency;

      this.cancelRegisterFieldGroup = registerFieldGroup(this.context.parentGroupName, this);
      this.cancelRegisterField = registerField(this.getName(), this, true); // visible级联

      if (!this.props.dependency) {
        return;
      }

      var formDependency = getFormDependency();
      var groupFieldPropsWithName = pick(this.props, ['dependency', 'name']);

      if (!groupFieldPropsWithName.name) {
        groupFieldPropsWithName.name = this.groupName;
      }

      formDependency.parseFormDependency(groupFieldPropsWithName);
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.cancelRegister();
      this.destory = true;
    }
  }, {
    key: "setVisible",
    // ================ 对外 API ================
    value: function setVisible(visible) {
      this.visible = visible;
      this.reRender();
    }
  }, {
    key: "getVisible",
    value: function getVisible() {
      return this.visible;
    } // 放入 NameListMap

  }, {
    key: "getName",
    value: function getName() {
      return toArray(this.groupName);
    }
  }, {
    key: "getGroupName",
    value: function getGroupName() {
      return this.groupName;
    }
  }, {
    key: "reRender",
    value: function reRender() {
      if (!this.destory) {
        this.forceUpdate();
      }
    } // =============== 配置转换 =================

    /**
     * 1. 如果是单列或者是inline，直接渲染即可
     * 2. 如果是多列且非inline，则使用 Col 包裹
     * 3. 如果存在 actionsRender，则放到最后
     */

  }, {
    key: "render",
    value: function render() {
      var _this$context = this.context,
          layout = _this$context.layout,
          itemLayout = _this$context.itemLayout,
          formContext = _this$context.formContext,
          size = _this$context.size,
          matchedPoint = _this$context.matchedPoint;

      var _formContext$getInter = formContext.getInternalHooks(HOOK_MARK),
          getCtx = _formContext$getInter.getCtx;

      if (!this.inited) {
        this.hasDependency = !isUndefined(this.props.dependency);
        this.visible = this.props.initialVisible !== false;
        this.groupName = getGroupName(this.props.name);
      }

      var finalLayout = this.props.layout || layout;
      var finalItemLayout = this.props.itemLayout ? getItemLayout(this.props.itemLayout, finalLayout, matchedPoint) : itemLayout;
      var fieldGroupExtraConf = {
        layout: finalLayout,
        itemLayout: finalItemLayout
      };
      var ctx = getCtx();
      var fieldGroupNode = this.renderFieldGroup(ctx, this.props, fieldGroupExtraConf);
      var fieldGroupContext = {
        formContext: formContext,
        layout: finalLayout,
        itemLayout: finalItemLayout,
        parentGroupName: this.groupName,
        size: size
      };
      return /*#__PURE__*/React.createElement(FieldGroupContext.Provider, {
        value: fieldGroupContext
      }, fieldGroupNode);
    }
  }]);

  return FieldGroup;
}(React.Component);

FieldGroup.contextType = FieldGroupContext;
export { FieldGroup as default };

function getGroupName(groupName) {
  return groupName || uniqueId('groupName_');
}