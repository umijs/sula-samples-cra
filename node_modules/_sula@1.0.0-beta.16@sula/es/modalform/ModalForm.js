import "antd/es/spin/style";
import _Spin from "antd/es/spin";
import "antd/es/modal/style";
import _Modal from "antd/es/modal";
import "antd/es/drawer/style";
import _Drawer from "antd/es/drawer";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

import React from 'react';
import assign from 'lodash/assign';
import isFunction from 'lodash/isFunction';
import LocaleReceiver from '../localereceiver';
import { STOP } from '../rope';
import { Form, FormAction, FieldGroup } from '../form';
import { renderActions } from '../template-create-form/CreateForm';

var ModalForm = /*#__PURE__*/function (_React$Component) {
  _inherits(ModalForm, _React$Component);

  var _super = _createSuper(ModalForm);

  function ModalForm() {
    var _this;

    _classCallCheck(this, ModalForm);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    _this.state = {
      loading: false
    };
    return _this;
  }

  _createClass(ModalForm, [{
    key: "render",
    value: function render() {
      var _this2 = this;

      var loading = this.state.loading;
      var _this$props = this.props,
          modal = _this$props.modal,
          visible = _this$props.visible,
          isDrawer = _this$props.isDrawer;
      var _modal$props = modal.props,
          props = _modal$props === void 0 ? {} : _modal$props; // 存在 type 说明是插件场景

      var type = props.type,
          title = props.title,
          _props$width = props.width,
          width = _props$width === void 0 ? isDrawer ? 550 : undefined : _props$width,
          _props$props = props.props,
          modalProps = _props$props === void 0 ? {} : _props$props,
          formProps = _objectWithoutProperties(props, ["type", "title", "width", "props"]);

      var actionsRender = formProps.actionsRender,
          fields = formProps.fields,
          container = formProps.container,
          submit = formProps.submit,
          submitButtonProps = formProps.submitButtonProps,
          backButtonProps = formProps.backButtonProps,
          ctxGetter = formProps.ctxGetter,
          restFormProps = _objectWithoutProperties(formProps, ["actionsRender", "fields", "container", "submit", "submitButtonProps", "backButtonProps", "ctxGetter"]);

      var ModalClass = isDrawer ? _Drawer : _Modal;

      var modalCtxGetter = function modalCtxGetter() {
        var modalCancel = function modalCancel() {
          if (type) {
            modal.close(STOP);
          } else {
            modal.close();
          }
        };

        var modalOk = function modalOk(ctx) {
          if (type) {
            var results = ctx.results,
                result = ctx.result;
            var finalResults = assign({
              $submit: result
            }, results);
            return modal.close(finalResults);
          } else {
            modal.close(ctx);
          }
        };

        return {
          // 插件模式且自定义renderActions 或者 非插件模式
          modal: {
            modalCancel: modalCancel,
            modalOk: modalOk
          }
        };
      };

      var finalCtxGetter;

      if (ctxGetter) {
        finalCtxGetter = _objectSpread(_objectSpread({}, isFunction(ctxGetter) ? {
          ctxGetter: ctxGetter
        } : ctxGetter), {}, {
          modal: modalCtxGetter
        });
      } else {
        finalCtxGetter = modalCtxGetter;
      }

      return /*#__PURE__*/React.createElement(LocaleReceiver, null, function (locale) {
        return /*#__PURE__*/React.createElement(Form, _extends({}, restFormProps, {
          ctxGetter: finalCtxGetter,
          onRemoteValuesStart: function onRemoteValuesStart() {
            _this2.setState({
              loading: true
            });
          },
          onRemoteValuesEnd: function onRemoteValuesEnd() {
            _this2.setState({
              loading: false
            });
          }
        }), /*#__PURE__*/React.createElement(ModalClass, _extends({}, modalProps, {
          title: title,
          width: width,
          visible: visible
        }, _defineProperty({}, isDrawer ? 'onClose' : 'onCancel', function () {
          if (type) {
            modal.close(STOP); // 终止行为链
          } else {
            modal.close();
          }
        }), {
          footer: visible ? /*#__PURE__*/React.createElement(FormAction, {
            actionsPosition: "right",
            actionsRender: actionsRender || renderActions(assign({
              submitBack: modalCtxGetter().modal.modalOk,
              back: modalCtxGetter().modal.modalCancel
            }, formProps), locale)
          }) : null
        }), /*#__PURE__*/React.createElement(_Spin, {
          spinning: loading
        }, /*#__PURE__*/React.createElement(FieldGroup, {
          container: container,
          fields: fields
        }))));
      });
    }
  }]);

  return ModalForm;
}(React.Component);

export { ModalForm as default };