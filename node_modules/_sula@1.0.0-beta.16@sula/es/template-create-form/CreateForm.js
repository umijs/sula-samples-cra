import "antd/es/spin/style";
import _Spin from "antd/es/spin";

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

import React from 'react';
import isNumber from 'lodash/isNumber';
import isFunction from 'lodash/isFunction';
import assign from 'lodash/assign';
import { Form, MediaQueries } from '../form';
import { toArray } from '../_util/common';
import LocaleReceiver from '../localereceiver';

var CreateForm = /*#__PURE__*/function (_React$Component) {
  _inherits(CreateForm, _React$Component);

  var _super = _createSuper(CreateForm);

  function CreateForm() {
    var _this;

    _classCallCheck(this, CreateForm);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    _this.state = {
      loading: false
    };
    return _this;
  }

  _createClass(CreateForm, [{
    key: "getActionsPosition",
    value: function getActionsPosition(cols) {
      // 多列
      if (cols > 1) {
        return 'center';
      } else {
        return 'default';
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props = this.props,
          submit = _this$props.submit,
          back = _this$props.back,
          submitButtonProps = _this$props.submitButtonProps,
          backButtonProps = _this$props.backButtonProps,
          actionsPosition = _this$props.actionsPosition,
          actionsRender = _this$props.actionsRender,
          formProps = _objectWithoutProperties(_this$props, ["submit", "back", "submitButtonProps", "backButtonProps", "actionsPosition", "actionsRender"]);

      var mode = formProps.mode,
          itemLayout = formProps.itemLayout;
      var loading = this.state.loading;
      return /*#__PURE__*/React.createElement(MediaQueries, null, function (matchedPoint) {
        return /*#__PURE__*/React.createElement(LocaleReceiver, null, function (locale) {
          var _itemLayout$cols = itemLayout.cols,
              cols = _itemLayout$cols === void 0 ? 1 : _itemLayout$cols;
          var finalCols = isNumber(cols) ? cols : cols[matchedPoint];

          var finalActionsPosition = actionsPosition || _this2.getActionsPosition(finalCols);

          var finalActionsRender = renderActions({
            submit: submit,
            back: back,
            submitButtonProps: submitButtonProps,
            backButtonProps: backButtonProps,
            mode: mode,
            actionsRender: actionsRender
          }, locale);
          return /*#__PURE__*/React.createElement(_Spin, {
            spinning: loading
          }, /*#__PURE__*/React.createElement(Form, _extends({}, formProps, {
            actionsRender: finalActionsRender,
            actionsPosition: finalActionsPosition,
            onRemoteValuesStart: function onRemoteValuesStart() {
              _this2.setState({
                loading: true
              });
            },
            onRemoteValuesEnd: function onRemoteValuesEnd() {
              _this2.setState({
                loading: false
              });
            }
          })));
        });
      });
    }
  }]);

  return CreateForm;
}(React.Component);

CreateForm.defaultProps = {
  mode: 'create',
  fields: [],
  itemLayout: {
    cols: 1
  }
};
export { CreateForm as default };
export function renderActions(props, locale) {
  if (props.actionsRender) {
    return props.actionsRender;
  }

  var submit = props.submit,
      _props$back = props.back,
      back = _props$back === void 0 ? 'back' : _props$back,
      submitBack = props.submitBack,
      _props$mode = props.mode,
      mode = _props$mode === void 0 ? 'create' : _props$mode,
      _props$submitButtonPr = props.submitButtonProps,
      submitButtonProps = _props$submitButtonPr === void 0 ? {} : _props$submitButtonPr,
      _props$backButtonProp = props.backButtonProps,
      backButtonProps = _props$backButtonProp === void 0 ? {} : _props$backButtonProp;
  var actionsRender = []; // 返回

  var backActionRender = {
    type: 'button',
    props: _objectSpread({
      children: mode === 'create' ? locale.cancelText : locale.backText
    }, backButtonProps),
    action: back
  };

  if (mode === 'view') {
    return [backActionRender];
  } // 提交


  var submitActionRender = {
    type: 'button',
    props: _objectSpread({
      type: 'primary',
      children: mode === 'create' ? locale.submitText : locale.updateText
    }, submitButtonProps),
    action: [{
      type: 'validateFields',
      resultPropName: '$fieldsValue'
    }].concat(_toConsumableArray(transformSubmit(submit, submitBack || back)))
  };
  actionsRender.push(submitActionRender);
  actionsRender.push(backActionRender);
  return actionsRender;
}

function resultToParams(ctx) {
  return assign({}, ctx.params, ctx.result);
}

export function transformSubmit(submit, back) {
  if (isFunction(submit)) {
    return [submit, back];
  }

  var convertParams = toArray(submit.convertParams || []);
  convertParams.unshift(resultToParams);
  var submitAction = assign({}, submit, {
    convertParams: convertParams
  });
  return [submitAction, back];
}