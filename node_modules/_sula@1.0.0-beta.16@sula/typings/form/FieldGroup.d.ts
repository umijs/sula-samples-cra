import React from 'react';
import { ColProps } from 'antd/lib/col';
import { FieldProps } from './Field';
import { FieldNameList } from '../types/form';
import { Dependencies } from '../types/dependency';
import { RenderPlugin } from '../types/plugin';
export declare type Layout = 'horizontal' | 'vertical' | 'inline';
export declare type ItemLayout = {
    cols?: number;
    span?: number;
    offset?: number;
    gutter?: number;
    wrapperCol?: ColProps | undefined;
    labelCol?: ColProps | undefined;
};
export declare type NormalizedItemLayout = Omit<ItemLayout, 'cols'> & {
    span?: number | undefined;
};
export interface FieldGroupProps {
    name?: string;
    layout?: Layout;
    itemLayout: ItemLayout;
    initialVisible?: boolean;
    children?: React.ReactFragment;
    fields?: FieldProps[];
    dependency: Pick<Dependencies, 'visible'>;
    container?: RenderPlugin;
    actionsRender?: RenderPlugin | RenderPlugin[];
    actionsPosition?: 'center' | 'right' | 'bottom';
}
export default class FieldGroup extends React.Component<FieldGroupProps> {
    static contextType: React.Context<import("./FieldGroupContext").FieldGroupContextProps>;
    private destory;
    private inited;
    private hasDependency;
    private visible;
    private groupName;
    private cancelRegisterField;
    private cancelRegisterFieldGroup;
    componentDidMount(): void;
    componentWillUnmount(): void;
    private cancelRegister;
    setVisible(visible: boolean): void;
    getVisible(): boolean;
    getName(): FieldNameList;
    getGroupName(): string;
    reRender(): void;
    /**
     * 1. 如果是单列或者是inline，直接渲染即可
     * 2. 如果是多列且非inline，则使用 Col 包裹
     * 3. 如果存在 actionsRender，则放到最后
     */
    private transFieldToElems;
    private renderChildren;
    private renderFieldGroup;
    render(): JSX.Element;
}
